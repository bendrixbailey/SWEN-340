
UnitTests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001530  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080016c0  080016c0  000116c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a28  08001a28  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08001a28  08001a28  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a28  08001a28  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a2c  08001a2c  00011a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08001a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  200001d4  08001c04  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08001c04  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fb7  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b67  00000000  00000000  000241bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  00024d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000120  00000000  00000000  00024ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002522f  00000000  00000000  00024ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000301a  00000000  00000000  0004a21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2df4  00000000  00000000  0004d239  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013002d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000087c  00000000  00000000  001300a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080016a8 	.word	0x080016a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080016a8 	.word	0x080016a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LED_Init>:
//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
#define LED_PIN 5

void LED_Init(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80002a4:	4b1d      	ldr	r3, [pc, #116]	; (800031c <LED_Init+0x7c>)
 80002a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <LED_Init+0x7c>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*LED_PIN));  
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1U<<(2*LED_PIN);      //  Output(01)
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ce:	6013      	str	r3, [r2, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*LED_PIN));
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002de:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=   3U<<(2*LED_PIN);  // High speed
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ea:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80002ee:	6093      	str	r3, [r2, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<LED_PIN);       // Push-pull
 80002f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002fa:	f023 0320 	bic.w	r3, r3, #32
 80002fe:	6053      	str	r3, [r2, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*LED_PIN));  // No pull-up, no pull-down
 8000300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800030e:	60d3      	str	r3, [r2, #12]
	
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000326:	4b6b      	ldr	r3, [pc, #428]	; (80004d4 <System_Clock_Init+0x1b4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a6a      	ldr	r2, [pc, #424]	; (80004d4 <System_Clock_Init+0x1b4>)
 800032c:	f023 0307 	bic.w	r3, r3, #7
 8000330:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000332:	4b68      	ldr	r3, [pc, #416]	; (80004d4 <System_Clock_Init+0x1b4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a67      	ldr	r2, [pc, #412]	; (80004d4 <System_Clock_Init+0x1b4>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 800033e:	4b66      	ldr	r3, [pc, #408]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a65      	ldr	r2, [pc, #404]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000348:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 800034a:	bf00      	nop
 800034c:	4b62      	ldr	r3, [pc, #392]	; (80004d8 <System_Clock_Init+0x1b8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000354:	2b00      	cmp	r3, #0
 8000356:	d0f9      	beq.n	800034c <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000358:	2310      	movs	r3, #16
 800035a:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 800035c:	4b5e      	ldr	r3, [pc, #376]	; (80004d8 <System_Clock_Init+0x1b8>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a5d      	ldr	r2, [pc, #372]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000362:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000366:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000368:	4b5b      	ldr	r3, [pc, #364]	; (80004d8 <System_Clock_Init+0x1b8>)
 800036a:	685a      	ldr	r2, [r3, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	061b      	lsls	r3, r3, #24
 8000370:	4959      	ldr	r1, [pc, #356]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000372:	4313      	orrs	r3, r2
 8000374:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000376:	4b58      	ldr	r3, [pc, #352]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a57      	ldr	r2, [pc, #348]	; (80004d8 <System_Clock_Init+0x1b8>)
 800037c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000380:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000382:	bf00      	nop
 8000384:	4b54      	ldr	r3, [pc, #336]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800038c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000390:	d0f8      	beq.n	8000384 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000392:	4b51      	ldr	r3, [pc, #324]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	4a50      	ldr	r2, [pc, #320]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000398:	f023 0303 	bic.w	r3, r3, #3
 800039c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800039e:	4b4e      	ldr	r3, [pc, #312]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	4a4d      	ldr	r2, [pc, #308]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 80003aa:	4b4b      	ldr	r3, [pc, #300]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80003b2:	4a49      	ldr	r2, [pc, #292]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003b4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80003b8:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 80003ba:	4b47      	ldr	r3, [pc, #284]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80003c2:	4a45      	ldr	r2, [pc, #276]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003c4:	f043 0310 	orr.w	r3, r3, #16
 80003c8:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 80003ca:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	4a42      	ldr	r2, [pc, #264]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80003d4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 80003d6:	4b40      	ldr	r3, [pc, #256]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	4a3f      	ldr	r2, [pc, #252]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003e0:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 80003e2:	4b3d      	ldr	r3, [pc, #244]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a3c      	ldr	r2, [pc, #240]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ec:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80003ee:	bf00      	nop
 80003f0:	4b39      	ldr	r3, [pc, #228]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0f9      	beq.n	80003f0 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80003fc:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <System_Clock_Init+0x1b8>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	4a35      	ldr	r2, [pc, #212]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000402:	f023 0303 	bic.w	r3, r3, #3
 8000406:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000408:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <System_Clock_Init+0x1b8>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	4a32      	ldr	r2, [pc, #200]	; (80004d8 <System_Clock_Init+0x1b8>)
 800040e:	f043 0303 	orr.w	r3, r3, #3
 8000412:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000414:	bf00      	nop
 8000416:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	f003 030c 	and.w	r3, r3, #12
 800041e:	2b0c      	cmp	r3, #12
 8000420:	d1f9      	bne.n	8000416 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	4a2c      	ldr	r2, [pc, #176]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800042c:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 800042e:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	4a29      	ldr	r2, [pc, #164]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000434:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000438:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <System_Clock_Init+0x1b8>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	4a26      	ldr	r2, [pc, #152]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000440:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000444:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000446:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a23      	ldr	r2, [pc, #140]	; (80004d8 <System_Clock_Init+0x1b8>)
 800044c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000450:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 8000452:	bf00      	nop
 8000454:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800045c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000460:	d0f8      	beq.n	8000454 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000462:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000464:	691b      	ldr	r3, [r3, #16]
 8000466:	4a1c      	ldr	r2, [pc, #112]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000468:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800046c:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	4a19      	ldr	r2, [pc, #100]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000474:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000478:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <System_Clock_Init+0x1b8>)
 800047c:	691b      	ldr	r3, [r3, #16]
 800047e:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000484:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000488:	691b      	ldr	r3, [r3, #16]
 800048a:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <System_Clock_Init+0x1b8>)
 800048c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000490:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <System_Clock_Init+0x1b8>)
 8000498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800049c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800049e:	bf00      	nop
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <System_Clock_Init+0x1b8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0f9      	beq.n	80004a0 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <System_Clock_Init+0x1b8>)
 80004ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004b2:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <System_Clock_Init+0x1b8>)
 80004b4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80004b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <System_Clock_Init+0x1b8>)
 80004be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c0:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <System_Clock_Init+0x1b8>)
 80004c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c6:	6613      	str	r3, [r2, #96]	; 0x60
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40022000 	.word	0x40022000
 80004d8:	40021000 	.word	0x40021000

080004dc <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <UART2_Init+0x40>)
 80004e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <UART2_Init+0x40>)
 80004e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ea:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <UART2_Init+0x40>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <UART2_Init+0x40>)
 80004f4:	f023 030c 	bic.w	r3, r3, #12
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <UART2_Init+0x40>)
 80004fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000502:	4a06      	ldr	r2, [pc, #24]	; (800051c <UART2_Init+0x40>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 800050c:	f000 f80a 	bl	8000524 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <UART2_Init+0x44>)
 8000512:	f000 f84f 	bl	80005b4 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	40004400 	.word	0x40004400

08000524 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <UART2_GPIO_Init+0x8c>)
 800052a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052c:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <UART2_GPIO_Init+0x8c>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000542:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800054e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000552:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000554:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000558:	6a1b      	ldr	r3, [r3, #32]
 800055a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800055e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000562:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000568:	6a1b      	ldr	r3, [r3, #32]
 800056a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800056e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000572:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800057e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000582:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000592:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000594:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059e:	f023 030c 	bic.w	r3, r3, #12
 80005a2:	6053      	str	r3, [r2, #4]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f023 0201 	bic.w	r2, r3, #1
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f242 028d 	movw	r2, #8333	; 0x208d
 80005f2:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f043 020c 	orr.w	r2, r3, #12
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <USART_Init+0xfc>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d129      	bne.n	800065c <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f043 0220 	orr.w	r2, r3, #32
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f023 0210 	bic.w	r2, r3, #16
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f023 0201 	bic.w	r2, r3, #1
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <USART_Init+0x100>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d10b      	bne.n	800067c <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <USART_Init+0x104>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <USART_Init+0x104>)
 8000676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800067a:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f043 0201 	orr.w	r2, r3, #1
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000688:	bf00      	nop
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000696:	bf00      	nop
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f9      	beq.n	8000698 <USART_Init+0xe4>
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40004c00 	.word	0x40004c00
 80006b4:	40004400 	.word	0x40004400
 80006b8:	40013800 	.word	0x40013800

080006bc <USART_Write>:
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag
}


void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e014      	b.n	80006f8 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80006ce:	bf00      	nop
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f9      	beq.n	80006d0 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80006ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006ee:	f000 f819 	bl	8000724 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d8e6      	bhi.n	80006ce <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000700:	bf00      	nop
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0f9      	beq.n	8000702 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	61da      	str	r2, [r3, #28]
}   
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2264      	movs	r2, #100	; 0x64
 8000730:	fb02 f203 	mul.w	r2, r2, r3
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <USART_Delay+0x38>)
 8000736:	fba3 1302 	umull	r1, r3, r3, r2
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	0852      	lsrs	r2, r2, #1
 800073e:	4413      	add	r3, r2
 8000740:	089b      	lsrs	r3, r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3b01      	subs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1f9      	bne.n	8000744 <USART_Delay+0x20>
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	24924925 	.word	0x24924925

08000760 <example_1>:

// Add the functions to be tested here and in the corresponding header file.

// Example function to test -- just adds one to received value.
uint32_t example_1( uint32_t input_value )
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	return ++input_value ;		// add one to input value and return that value
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <example_2>:

// Example function to test -- returns the wrong string
char *example_2( char *input_string )
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	char* return_character;
	return_character = &input_string[1];
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
	return return_character;		// This line is wrong. Fix it so it returns pointer to 2nd character in the string
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <test_for_bit_value>:

// test_for_bit_value
// This function returns 1 if the bit_position in byte_value is true (set) or returns 0 if false.
// Note that bit_position values range from 0 through 7 with 0 as the least significant bit.
uint8_t test_for_bit_value( uint8_t byte_value, uint8_t bit_position )
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	460a      	mov	r2, r1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4613      	mov	r3, r2
 80007a6:	71bb      	strb	r3, [r7, #6]
	if(byte_value & (1<<bit_position)){ //if value of bit_position is 1, then its set
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	fa42 f303 	asr.w	r3, r2, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <test_for_bit_value+0x24>
		return 1; //so return 1
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <test_for_bit_value+0x26>
	}else{
		return 0; //otherwise return 0
 80007bc:	2300      	movs	r3, #0
	}
	//return byte_value & 1<<bit_position;
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <swap_case_in_string>:
// Characters that are not letters are unaltered. Be sure to copy the end of string marker!
// You may assume that the output string has sufficient space to store the result and that both pointers
// are valid pointers.
// You are allowed to use the isupper, islower, toupper, and tolower functions.
void swap_case_in_string( char *input_string, char *output_string )
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b08a      	sub	sp, #40	; 0x28
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
//			temp_char = toupper(input_string[i]);
//		}
//		strcat(output_string, temp_char);
//	}
	char temp_string[20];
	int i = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
	while(input_string[i] != '\0'){
 80007d8:	e068      	b.n	80008ac <swap_case_in_string+0xe2>
	    if(isupper(input_string[i])){
 80007da:	f000 fb29 	bl	8000e30 <__locale_ctype_ptr>
 80007de:	4601      	mov	r1, r0
 80007e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	440b      	add	r3, r1
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	f003 0303 	and.w	r3, r3, #3
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d11f      	bne.n	8000836 <swap_case_in_string+0x6c>
	    	temp_string[i] = tolower(input_string[i]);;
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000802:	f000 fb15 	bl	8000e30 <__locale_ctype_ptr>
 8000806:	4602      	mov	r2, r0
 8000808:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800080c:	3301      	adds	r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f003 0303 	and.w	r3, r3, #3
 8000816:	2b01      	cmp	r3, #1
 8000818:	d103      	bne.n	8000822 <swap_case_in_string+0x58>
 800081a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800081e:	3320      	adds	r3, #32
 8000820:	e001      	b.n	8000826 <swap_case_in_string+0x5c>
 8000822:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000826:	b2d9      	uxtb	r1, r3
 8000828:	f107 020c 	add.w	r2, r7, #12
 800082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082e:	4413      	add	r3, r2
 8000830:	460a      	mov	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	e037      	b.n	80008a6 <swap_case_in_string+0xdc>
	    }
	    else if(islower(input_string[i])){
 8000836:	f000 fafb 	bl	8000e30 <__locale_ctype_ptr>
 800083a:	4601      	mov	r1, r0
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	440b      	add	r3, r1
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	f003 0303 	and.w	r3, r3, #3
 800084e:	2b02      	cmp	r3, #2
 8000850:	d11f      	bne.n	8000892 <swap_case_in_string+0xc8>
	        temp_string[i] = toupper(input_string[i]);;
 8000852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800085e:	f000 fae7 	bl	8000e30 <__locale_ctype_ptr>
 8000862:	4602      	mov	r2, r0
 8000864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000868:	3301      	adds	r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f003 0303 	and.w	r3, r3, #3
 8000872:	2b02      	cmp	r3, #2
 8000874:	d103      	bne.n	800087e <swap_case_in_string+0xb4>
 8000876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800087a:	3b20      	subs	r3, #32
 800087c:	e001      	b.n	8000882 <swap_case_in_string+0xb8>
 800087e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000882:	b2d9      	uxtb	r1, r3
 8000884:	f107 020c 	add.w	r2, r7, #12
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	4413      	add	r3, r2
 800088c:	460a      	mov	r2, r1
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	e009      	b.n	80008a6 <swap_case_in_string+0xdc>
	    }
	    else{
	    	temp_string[i] = input_string[i];
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	7819      	ldrb	r1, [r3, #0]
 800089a:	f107 020c 	add.w	r2, r7, #12
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	4413      	add	r3, r2
 80008a2:	460a      	mov	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
	    }
	    i++;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	3301      	adds	r3, #1
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
	while(input_string[i] != '\0'){
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d190      	bne.n	80007da <swap_case_in_string+0x10>
	}
	temp_string[i] = '\0';
 80008b8:	f107 020c 	add.w	r2, r7, #12
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	4413      	add	r3, r2
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
	strcpy( output_string, temp_string) ;		// bogus code to force unit tests to fail
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f000 fad0 	bl	8000e70 <strcpy>
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <main>:
#include "UART.h"
#include "unit_tests.h"

// Only add a call to your main code to this source file.
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	System_Clock_Init(); // Switch System Clock = 80 MHz
 80008dc:	f7ff fd20 	bl	8000320 <System_Clock_Init>
	LED_Init();
 80008e0:	f7ff fcde 	bl	80002a0 <LED_Init>
	UART2_Init();
 80008e4:	f7ff fdfa 	bl	80004dc <UART2_Init>
	
	// Add your one function call here
	test() ;
 80008e8:	f000 f8c6 	bl	8000a78 <test>
	while ( 1 )		// loop forever in case the function returns.
 80008ec:	e7fe      	b.n	80008ec <main+0x14>
	...

080008f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f8:	4a14      	ldr	r2, [pc, #80]	; (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d207      	bcs.n	8000930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000920:	f000 fa5c 	bl	8000ddc <__errno>
 8000924:	4602      	mov	r2, r0
 8000926:	230c      	movs	r3, #12
 8000928:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	e009      	b.n	8000944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <_sbrk+0x64>)
 8000940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20018000 	.word	0x20018000
 8000950:	00000400 	.word	0x00000400
 8000954:	200001f0 	.word	0x200001f0
 8000958:	20000200 	.word	0x20000200

0800095c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <SystemInit+0x64>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <SystemInit+0x64>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <SystemInit+0x68>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <SystemInit+0x68>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <SystemInit+0x68>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <SystemInit+0x68>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <SystemInit+0x68>)
 8000988:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800098c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000990:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <SystemInit+0x68>)
 8000994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000998:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <SystemInit+0x68>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <SystemInit+0x68>)
 80009a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <SystemInit+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SystemInit+0x64>)
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	609a      	str	r2, [r3, #8]
#endif
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00
 80009c4:	40021000 	.word	0x40021000

080009c8 <st_printf>:

// ST version of printf for STM32L476VG in bare metal mode.
// Does not return a value but otherwise works like printf.
// NOTE -- the max expected formated string is limited. See the buffer definition in the function.
void st_printf( char string_format[], ... )
{
 80009c8:	b40f      	push	{r0, r1, r2, r3}
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b09a      	sub	sp, #104	; 0x68
 80009ce:	af00      	add	r7, sp, #0
	char buffer[100] ;
	va_list arguments ;
	
	va_start( arguments, string_format ) ;
 80009d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009d4:	603b      	str	r3, [r7, #0]
	vsprintf( buffer, string_format, arguments ) ;		// create the formatted string in buffer -- hope it fits!
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fa65 	bl	8000eac <vsiprintf>
	va_end( arguments ) ;
	USART_Write( USART2, (uint8_t *)buffer, strlen( buffer ) ) ;	// now write it out to USART2
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fbfd 	bl	80001e4 <strlen>
 80009ea:	4602      	mov	r2, r0
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <st_printf+0x3c>)
 80009f2:	f7ff fe63 	bl	80006bc <USART_Write>
}
 80009f6:	bf00      	nop
 80009f8:	3768      	adds	r7, #104	; 0x68
 80009fa:	46bd      	mov	sp, r7
 80009fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a00:	b004      	add	sp, #16
 8000a02:	4770      	bx	lr
 8000a04:	40004400 	.word	0x40004400

08000a08 <assert>:

// Simple boolean assert function for unit testing
int assert( int test_result, char error_format[], ... ) {
 8000a08:	b40e      	push	{r1, r2, r3}
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b09f      	sub	sp, #124	; 0x7c
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	va_list arguments ;
	char buffer[100] ;
	static int test_number = 1 ;
	int result = 1 ;	// return 1 for test passed or 0 if failed
 8000a12:	2301      	movs	r3, #1
 8000a14:	677b      	str	r3, [r7, #116]	; 0x74
	
	if ( ! test_result ) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d11a      	bne.n	8000a52 <assert+0x4a>
		st_printf( "Test # %d failed: ", test_number ) ;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <assert+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4813      	ldr	r0, [pc, #76]	; (8000a70 <assert+0x68>)
 8000a24:	f7ff ffd0 	bl	80009c8 <st_printf>
		va_start( arguments, error_format ) ;
 8000a28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a2c:	673b      	str	r3, [r7, #112]	; 0x70
		vsprintf( buffer, error_format, arguments ) ;
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a34:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fa37 	bl	8000eac <vsiprintf>
		st_printf( buffer ) ;
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffc0 	bl	80009c8 <st_printf>
		va_end( arguments ) ;
		st_printf( "\r\n" ) ;
 8000a48:	480a      	ldr	r0, [pc, #40]	; (8000a74 <assert+0x6c>)
 8000a4a:	f7ff ffbd 	bl	80009c8 <st_printf>
		result = 0 ;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	677b      	str	r3, [r7, #116]	; 0x74
	}
	test_number++ ;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <assert+0x64>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <assert+0x64>)
 8000a5a:	6013      	str	r3, [r2, #0]
	return result ;
 8000a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	377c      	adds	r7, #124	; 0x7c
 8000a62:	46bd      	mov	sp, r7
 8000a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a68:	b003      	add	sp, #12
 8000a6a:	4770      	bx	lr
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	080016c0 	.word	0x080016c0
 8000a74:	080016d4 	.word	0x080016d4

08000a78 <test>:
// Begin unit tests //////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

// do the unit tests
int test()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
	int passcount = 0 ;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
	int failcount = 0 ;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
	
  // Example tests	
	st_printf( "\r\nTests for example_1 and example_2...................\r\n" ) ;
 8000a86:	48ae      	ldr	r0, [pc, #696]	; (8000d40 <test+0x2c8>)
 8000a88:	f7ff ff9e 	bl	80009c8 <st_printf>
	// Test 1
	uint32_t result = example_1( 5 ) ;
 8000a8c:	2005      	movs	r0, #5
 8000a8e:	f7ff fe67 	bl	8000760 <example_1>
 8000a92:	62f8      	str	r0, [r7, #44]	; 0x2c
	assert( result == 6,
 8000a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa2:	49a8      	ldr	r1, [pc, #672]	; (8000d44 <test+0x2cc>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffaf 	bl	8000a08 <assert>
 8000aaa:	4603      	mov	r3, r0
		"Expected the value 6 but got %d", result )
		? passcount++ : failcount++ ;
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <test+0x40>
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ab6:	e002      	b.n	8000abe <test+0x46>
 8000ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aba:	3301      	adds	r3, #1
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30

	// Test 2
	char *input_string = "TheTest" ;
 8000abe:	4ba2      	ldr	r3, [pc, #648]	; (8000d48 <test+0x2d0>)
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
	char *updated_pointer = example_2( input_string ) ;
 8000ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ac4:	f7ff fe5a 	bl	800077c <example_2>
 8000ac8:	6278      	str	r0, [r7, #36]	; 0x24
	assert( *updated_pointer == *(input_string + 1),
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
		"Expected the %c but got %c", *( input_string + 1 ), *updated_pointer )
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	781b      	ldrb	r3, [r3, #0]
	assert( *updated_pointer == *(input_string + 1),
 8000ae6:	461a      	mov	r2, r3
		"Expected the %c but got %c", *( input_string + 1 ), *updated_pointer )
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	781b      	ldrb	r3, [r3, #0]
	assert( *updated_pointer == *(input_string + 1),
 8000aec:	4997      	ldr	r1, [pc, #604]	; (8000d4c <test+0x2d4>)
 8000aee:	f7ff ff8b 	bl	8000a08 <assert>
 8000af2:	4603      	mov	r3, r0
		? passcount++ : failcount++ ;
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <test+0x88>
 8000af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afa:	3301      	adds	r3, #1
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
 8000afe:	e002      	b.n	8000b06 <test+0x8e>
 8000b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b02:	3301      	adds	r3, #1
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30

	st_printf( "\r\nTests for test_for_bit_value........................\r\n" ) ;
 8000b06:	4892      	ldr	r0, [pc, #584]	; (8000d50 <test+0x2d8>)
 8000b08:	f7ff ff5e 	bl	80009c8 <st_printf>
	// Test 3
	uint8_t bit_test = test_for_bit_value( 4, 0 ) ;
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f7ff fe42 	bl	8000798 <test_for_bit_value>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	assert( bit_test == 0,
 8000b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf0c      	ite	eq
 8000b22:	2301      	moveq	r3, #1
 8000b24:	2300      	movne	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4988      	ldr	r1, [pc, #544]	; (8000d54 <test+0x2dc>)
 8000b32:	f7ff ff69 	bl	8000a08 <assert>
 8000b36:	4603      	mov	r3, r0
		"Expected 0 value for bit 0 but got %d", bit_test )
		? passcount++ : failcount++ ;
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <test+0xcc>
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b3e:	3301      	adds	r3, #1
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
 8000b42:	e002      	b.n	8000b4a <test+0xd2>
 8000b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b46:	3301      	adds	r3, #1
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30

	// Test 4
	bit_test = test_for_bit_value( 4, 1 ) ;
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	f7ff fe23 	bl	8000798 <test_for_bit_value>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	assert( bit_test == 0,
 8000b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf0c      	ite	eq
 8000b60:	2301      	moveq	r3, #1
 8000b62:	2300      	movne	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	497a      	ldr	r1, [pc, #488]	; (8000d58 <test+0x2e0>)
 8000b70:	f7ff ff4a 	bl	8000a08 <assert>
 8000b74:	4603      	mov	r3, r0
		"Expected 0 value for bit 1 but got %d", bit_test )
		? passcount++ : failcount++ ;
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <test+0x10a>
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b80:	e002      	b.n	8000b88 <test+0x110>
 8000b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b84:	3301      	adds	r3, #1
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30

	// Test 5
	bit_test = test_for_bit_value( 4, 2 ) ;
 8000b88:	2102      	movs	r1, #2
 8000b8a:	2004      	movs	r0, #4
 8000b8c:	f7ff fe04 	bl	8000798 <test_for_bit_value>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	assert( bit_test == 1,
 8000b96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	bf0c      	ite	eq
 8000b9e:	2301      	moveq	r3, #1
 8000ba0:	2300      	movne	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000baa:	461a      	mov	r2, r3
 8000bac:	496b      	ldr	r1, [pc, #428]	; (8000d5c <test+0x2e4>)
 8000bae:	f7ff ff2b 	bl	8000a08 <assert>
 8000bb2:	4603      	mov	r3, r0
		"Expected 1 value for bit 2 but got %d", bit_test )
		? passcount++ : failcount++ ;
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <test+0x148>
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bba:	3301      	adds	r3, #1
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8000bbe:	e002      	b.n	8000bc6 <test+0x14e>
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30

	// Test 6
	bit_test = test_for_bit_value( 4, 3 ) ;
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	2004      	movs	r0, #4
 8000bca:	f7ff fde5 	bl	8000798 <test_for_bit_value>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	assert( bit_test == 0,
 8000bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	bf0c      	ite	eq
 8000bdc:	2301      	moveq	r3, #1
 8000bde:	2300      	movne	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000be8:	461a      	mov	r2, r3
 8000bea:	495d      	ldr	r1, [pc, #372]	; (8000d60 <test+0x2e8>)
 8000bec:	f7ff ff0c 	bl	8000a08 <assert>
 8000bf0:	4603      	mov	r3, r0
		"Expected 0 value for bit 3 but got %d", bit_test )
		? passcount++ : failcount++ ;
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <test+0x186>
 8000bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8000bfc:	e002      	b.n	8000c04 <test+0x18c>
 8000bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c00:	3301      	adds	r3, #1
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30

	st_printf( "\r\nTests for swap_case_in_string........................\r\n" ) ;
 8000c04:	4857      	ldr	r0, [pc, #348]	; (8000d64 <test+0x2ec>)
 8000c06:	f7ff fedf 	bl	80009c8 <st_printf>
	// Test 7
	char output_string[20] ;
	char *input = "s" ;
 8000c0a:	4b57      	ldr	r3, [pc, #348]	; (8000d68 <test+0x2f0>)
 8000c0c:	61fb      	str	r3, [r7, #28]
	char *expected = "S" ;
 8000c0e:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <test+0x2f4>)
 8000c10:	61bb      	str	r3, [r7, #24]
	swap_case_in_string( input, output_string ) ;
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	69f8      	ldr	r0, [r7, #28]
 8000c18:	f7ff fdd7 	bl	80007ca <swap_case_in_string>
	assert( strcmp( expected, output_string ) == 0,
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	69b8      	ldr	r0, [r7, #24]
 8000c22:	f7ff fad5 	bl	80001d0 <strcmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2301      	moveq	r3, #1
 8000c2e:	2300      	movne	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	494d      	ldr	r1, [pc, #308]	; (8000d70 <test+0x2f8>)
 8000c3a:	f7ff fee5 	bl	8000a08 <assert>
 8000c3e:	4603      	mov	r3, r0
		"Expected %s but got %s", expected, output_string )
		? passcount++ : failcount++ ;
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <test+0x1d4>
 8000c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c46:	3301      	adds	r3, #1
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
 8000c4a:	e002      	b.n	8000c52 <test+0x1da>
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4e:	3301      	adds	r3, #1
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30

	// Test 8
	input = "12abCD" ;
 8000c52:	4b48      	ldr	r3, [pc, #288]	; (8000d74 <test+0x2fc>)
 8000c54:	61fb      	str	r3, [r7, #28]
	expected = "12ABcd" ;
 8000c56:	4b48      	ldr	r3, [pc, #288]	; (8000d78 <test+0x300>)
 8000c58:	61bb      	str	r3, [r7, #24]
	swap_case_in_string( input, output_string ) ;
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	69f8      	ldr	r0, [r7, #28]
 8000c60:	f7ff fdb3 	bl	80007ca <swap_case_in_string>
	assert( strcmp( expected, output_string ) == 0,
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	69b8      	ldr	r0, [r7, #24]
 8000c6a:	f7ff fab1 	bl	80001d0 <strcmp>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf0c      	ite	eq
 8000c74:	2301      	moveq	r3, #1
 8000c76:	2300      	movne	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	493b      	ldr	r1, [pc, #236]	; (8000d70 <test+0x2f8>)
 8000c82:	f7ff fec1 	bl	8000a08 <assert>
 8000c86:	4603      	mov	r3, r0
		"Expected %s but got %s", expected, output_string )
		? passcount++ : failcount++ ;
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <test+0x21c>
 8000c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8e:	3301      	adds	r3, #1
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
 8000c92:	e002      	b.n	8000c9a <test+0x222>
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	3301      	adds	r3, #1
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30

	// Test 9
	// Add a test for an empty input string
	input = "";
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <test+0x304>)
 8000c9c:	61fb      	str	r3, [r7, #28]
	expected = "";
 8000c9e:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <test+0x304>)
 8000ca0:	61bb      	str	r3, [r7, #24]
	swap_case_in_string(input, output_string);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	69f8      	ldr	r0, [r7, #28]
 8000ca8:	f7ff fd8f 	bl	80007ca <swap_case_in_string>
	assert(strcmp(expected, output_string) == 0,
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	69b8      	ldr	r0, [r7, #24]
 8000cb2:	f7ff fa8d 	bl	80001d0 <strcmp>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bf0c      	ite	eq
 8000cbc:	2301      	moveq	r3, #1
 8000cbe:	2300      	movne	r3, #0
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4929      	ldr	r1, [pc, #164]	; (8000d70 <test+0x2f8>)
 8000cca:	f7ff fe9d 	bl	8000a08 <assert>
 8000cce:	4603      	mov	r3, r0
			"Expected %s but got %s", expected, output_string)
			? passcount ++ : failcount++ ;
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <test+0x264>
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000cda:	e002      	b.n	8000ce2 <test+0x26a>
 8000cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cde:	3301      	adds	r3, #1
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30

	// Test 10
	// Add a test for an input string containing "123456"
	input = "123456";
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <test+0x308>)
 8000ce4:	61fb      	str	r3, [r7, #28]
	expected = "123456";
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <test+0x308>)
 8000ce8:	61bb      	str	r3, [r7, #24]
	swap_case_in_string(input, output_string);
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	69f8      	ldr	r0, [r7, #28]
 8000cf0:	f7ff fd6b 	bl	80007ca <swap_case_in_string>
	assert(strcmp(expected, output_string) == 0,
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	69b8      	ldr	r0, [r7, #24]
 8000cfa:	f7ff fa69 	bl	80001d0 <strcmp>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf0c      	ite	eq
 8000d04:	2301      	moveq	r3, #1
 8000d06:	2300      	movne	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4917      	ldr	r1, [pc, #92]	; (8000d70 <test+0x2f8>)
 8000d12:	f7ff fe79 	bl	8000a08 <assert>
 8000d16:	4603      	mov	r3, r0
			"Expected %s but got %s", expected, output_string)
			? passcount ++ : failcount++ ;
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <test+0x2ac>
 8000d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1e:	3301      	adds	r3, #1
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
 8000d22:	e002      	b.n	8000d2a <test+0x2b2>
 8000d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d26:	3301      	adds	r3, #1
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
	
		
	st_printf( "\r\nSummary of unit tests:\r\n%d tests passed\r\n%d tests failed\r\n\n", passcount, failcount ) ;
 8000d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <test+0x30c>)
 8000d30:	f7ff fe4a 	bl	80009c8 <st_printf>
	
	return failcount ;
 8000d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3738      	adds	r7, #56	; 0x38
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	080016d8 	.word	0x080016d8
 8000d44:	08001714 	.word	0x08001714
 8000d48:	08001734 	.word	0x08001734
 8000d4c:	0800173c 	.word	0x0800173c
 8000d50:	08001758 	.word	0x08001758
 8000d54:	08001794 	.word	0x08001794
 8000d58:	080017bc 	.word	0x080017bc
 8000d5c:	080017e4 	.word	0x080017e4
 8000d60:	0800180c 	.word	0x0800180c
 8000d64:	08001834 	.word	0x08001834
 8000d68:	08001870 	.word	0x08001870
 8000d6c:	08001874 	.word	0x08001874
 8000d70:	08001878 	.word	0x08001878
 8000d74:	08001890 	.word	0x08001890
 8000d78:	08001898 	.word	0x08001898
 8000d7c:	080018a0 	.word	0x080018a0
 8000d80:	080018a4 	.word	0x080018a4
 8000d84:	080018ac 	.word	0x080018ac

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff fde6 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d92:	e003      	b.n	8000d9c <LoopCopyDataInit>

08000d94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d9a:	3104      	adds	r1, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000da0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000da2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000da4:	d3f6      	bcc.n	8000d94 <CopyDataInit>
	ldr	r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000da8:	e002      	b.n	8000db0 <LoopFillZerobss>

08000daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000daa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dac:	f842 3b04 	str.w	r3, [r2], #4

08000db0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000db2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000db4:	d3f9      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f000 f817 	bl	8000de8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fd8d 	bl	80008d8 <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000dc4:	08001a30 	.word	0x08001a30
	ldr	r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dcc:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8000dd0:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8000dd4:	20000200 	.word	0x20000200

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>
	...

08000ddc <__errno>:
 8000ddc:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <__errno+0x8>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000004 	.word	0x20000004

08000de8 <__libc_init_array>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	4e0d      	ldr	r6, [pc, #52]	; (8000e20 <__libc_init_array+0x38>)
 8000dec:	4c0d      	ldr	r4, [pc, #52]	; (8000e24 <__libc_init_array+0x3c>)
 8000dee:	1ba4      	subs	r4, r4, r6
 8000df0:	10a4      	asrs	r4, r4, #2
 8000df2:	2500      	movs	r5, #0
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	d109      	bne.n	8000e0c <__libc_init_array+0x24>
 8000df8:	4e0b      	ldr	r6, [pc, #44]	; (8000e28 <__libc_init_array+0x40>)
 8000dfa:	4c0c      	ldr	r4, [pc, #48]	; (8000e2c <__libc_init_array+0x44>)
 8000dfc:	f000 fc54 	bl	80016a8 <_init>
 8000e00:	1ba4      	subs	r4, r4, r6
 8000e02:	10a4      	asrs	r4, r4, #2
 8000e04:	2500      	movs	r5, #0
 8000e06:	42a5      	cmp	r5, r4
 8000e08:	d105      	bne.n	8000e16 <__libc_init_array+0x2e>
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e10:	4798      	blx	r3
 8000e12:	3501      	adds	r5, #1
 8000e14:	e7ee      	b.n	8000df4 <__libc_init_array+0xc>
 8000e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e1a:	4798      	blx	r3
 8000e1c:	3501      	adds	r5, #1
 8000e1e:	e7f2      	b.n	8000e06 <__libc_init_array+0x1e>
 8000e20:	08001a28 	.word	0x08001a28
 8000e24:	08001a28 	.word	0x08001a28
 8000e28:	08001a28 	.word	0x08001a28
 8000e2c:	08001a2c 	.word	0x08001a2c

08000e30 <__locale_ctype_ptr>:
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__locale_ctype_ptr+0x14>)
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <__locale_ctype_ptr+0x18>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf08      	it	eq
 8000e3c:	4613      	moveq	r3, r2
 8000e3e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8000e42:	4770      	bx	lr
 8000e44:	20000004 	.word	0x20000004
 8000e48:	20000068 	.word	0x20000068

08000e4c <__ascii_mbtowc>:
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	b901      	cbnz	r1, 8000e52 <__ascii_mbtowc+0x6>
 8000e50:	a901      	add	r1, sp, #4
 8000e52:	b142      	cbz	r2, 8000e66 <__ascii_mbtowc+0x1a>
 8000e54:	b14b      	cbz	r3, 8000e6a <__ascii_mbtowc+0x1e>
 8000e56:	7813      	ldrb	r3, [r2, #0]
 8000e58:	600b      	str	r3, [r1, #0]
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	1c10      	adds	r0, r2, #0
 8000e5e:	bf18      	it	ne
 8000e60:	2001      	movne	r0, #1
 8000e62:	b002      	add	sp, #8
 8000e64:	4770      	bx	lr
 8000e66:	4610      	mov	r0, r2
 8000e68:	e7fb      	b.n	8000e62 <__ascii_mbtowc+0x16>
 8000e6a:	f06f 0001 	mvn.w	r0, #1
 8000e6e:	e7f8      	b.n	8000e62 <__ascii_mbtowc+0x16>

08000e70 <strcpy>:
 8000e70:	4603      	mov	r3, r0
 8000e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e76:	f803 2b01 	strb.w	r2, [r3], #1
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d1f9      	bne.n	8000e72 <strcpy+0x2>
 8000e7e:	4770      	bx	lr

08000e80 <_vsiprintf_r>:
 8000e80:	b500      	push	{lr}
 8000e82:	b09b      	sub	sp, #108	; 0x6c
 8000e84:	9100      	str	r1, [sp, #0]
 8000e86:	9104      	str	r1, [sp, #16]
 8000e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000e8c:	9105      	str	r1, [sp, #20]
 8000e8e:	9102      	str	r1, [sp, #8]
 8000e90:	4905      	ldr	r1, [pc, #20]	; (8000ea8 <_vsiprintf_r+0x28>)
 8000e92:	9103      	str	r1, [sp, #12]
 8000e94:	4669      	mov	r1, sp
 8000e96:	f000 f87b 	bl	8000f90 <_svfiprintf_r>
 8000e9a:	9b00      	ldr	r3, [sp, #0]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	b01b      	add	sp, #108	; 0x6c
 8000ea2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ea6:	bf00      	nop
 8000ea8:	ffff0208 	.word	0xffff0208

08000eac <vsiprintf>:
 8000eac:	4613      	mov	r3, r2
 8000eae:	460a      	mov	r2, r1
 8000eb0:	4601      	mov	r1, r0
 8000eb2:	4802      	ldr	r0, [pc, #8]	; (8000ebc <vsiprintf+0x10>)
 8000eb4:	6800      	ldr	r0, [r0, #0]
 8000eb6:	f7ff bfe3 	b.w	8000e80 <_vsiprintf_r>
 8000eba:	bf00      	nop
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <__ascii_wctomb>:
 8000ec0:	b149      	cbz	r1, 8000ed6 <__ascii_wctomb+0x16>
 8000ec2:	2aff      	cmp	r2, #255	; 0xff
 8000ec4:	bf85      	ittet	hi
 8000ec6:	238a      	movhi	r3, #138	; 0x8a
 8000ec8:	6003      	strhi	r3, [r0, #0]
 8000eca:	700a      	strbls	r2, [r1, #0]
 8000ecc:	f04f 30ff 	movhi.w	r0, #4294967295
 8000ed0:	bf98      	it	ls
 8000ed2:	2001      	movls	r0, #1
 8000ed4:	4770      	bx	lr
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	4770      	bx	lr

08000eda <__ssputs_r>:
 8000eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ede:	688e      	ldr	r6, [r1, #8]
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	4682      	mov	sl, r0
 8000ee4:	460c      	mov	r4, r1
 8000ee6:	4690      	mov	r8, r2
 8000ee8:	4699      	mov	r9, r3
 8000eea:	d837      	bhi.n	8000f5c <__ssputs_r+0x82>
 8000eec:	898a      	ldrh	r2, [r1, #12]
 8000eee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000ef2:	d031      	beq.n	8000f58 <__ssputs_r+0x7e>
 8000ef4:	6825      	ldr	r5, [r4, #0]
 8000ef6:	6909      	ldr	r1, [r1, #16]
 8000ef8:	1a6f      	subs	r7, r5, r1
 8000efa:	6965      	ldr	r5, [r4, #20]
 8000efc:	2302      	movs	r3, #2
 8000efe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f02:	fb95 f5f3 	sdiv	r5, r5, r3
 8000f06:	f109 0301 	add.w	r3, r9, #1
 8000f0a:	443b      	add	r3, r7
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	bf38      	it	cc
 8000f10:	461d      	movcc	r5, r3
 8000f12:	0553      	lsls	r3, r2, #21
 8000f14:	d530      	bpl.n	8000f78 <__ssputs_r+0x9e>
 8000f16:	4629      	mov	r1, r5
 8000f18:	f000 fb2c 	bl	8001574 <_malloc_r>
 8000f1c:	4606      	mov	r6, r0
 8000f1e:	b950      	cbnz	r0, 8000f36 <__ssputs_r+0x5c>
 8000f20:	230c      	movs	r3, #12
 8000f22:	f8ca 3000 	str.w	r3, [sl]
 8000f26:	89a3      	ldrh	r3, [r4, #12]
 8000f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2c:	81a3      	strh	r3, [r4, #12]
 8000f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	463a      	mov	r2, r7
 8000f38:	6921      	ldr	r1, [r4, #16]
 8000f3a:	f000 faa9 	bl	8001490 <memcpy>
 8000f3e:	89a3      	ldrh	r3, [r4, #12]
 8000f40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	81a3      	strh	r3, [r4, #12]
 8000f4a:	6126      	str	r6, [r4, #16]
 8000f4c:	6165      	str	r5, [r4, #20]
 8000f4e:	443e      	add	r6, r7
 8000f50:	1bed      	subs	r5, r5, r7
 8000f52:	6026      	str	r6, [r4, #0]
 8000f54:	60a5      	str	r5, [r4, #8]
 8000f56:	464e      	mov	r6, r9
 8000f58:	454e      	cmp	r6, r9
 8000f5a:	d900      	bls.n	8000f5e <__ssputs_r+0x84>
 8000f5c:	464e      	mov	r6, r9
 8000f5e:	4632      	mov	r2, r6
 8000f60:	4641      	mov	r1, r8
 8000f62:	6820      	ldr	r0, [r4, #0]
 8000f64:	f000 fa9f 	bl	80014a6 <memmove>
 8000f68:	68a3      	ldr	r3, [r4, #8]
 8000f6a:	1b9b      	subs	r3, r3, r6
 8000f6c:	60a3      	str	r3, [r4, #8]
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	441e      	add	r6, r3
 8000f72:	6026      	str	r6, [r4, #0]
 8000f74:	2000      	movs	r0, #0
 8000f76:	e7dc      	b.n	8000f32 <__ssputs_r+0x58>
 8000f78:	462a      	mov	r2, r5
 8000f7a:	f000 fb55 	bl	8001628 <_realloc_r>
 8000f7e:	4606      	mov	r6, r0
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d1e2      	bne.n	8000f4a <__ssputs_r+0x70>
 8000f84:	6921      	ldr	r1, [r4, #16]
 8000f86:	4650      	mov	r0, sl
 8000f88:	f000 faa6 	bl	80014d8 <_free_r>
 8000f8c:	e7c8      	b.n	8000f20 <__ssputs_r+0x46>
	...

08000f90 <_svfiprintf_r>:
 8000f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f94:	461d      	mov	r5, r3
 8000f96:	898b      	ldrh	r3, [r1, #12]
 8000f98:	061f      	lsls	r7, r3, #24
 8000f9a:	b09d      	sub	sp, #116	; 0x74
 8000f9c:	4680      	mov	r8, r0
 8000f9e:	460c      	mov	r4, r1
 8000fa0:	4616      	mov	r6, r2
 8000fa2:	d50f      	bpl.n	8000fc4 <_svfiprintf_r+0x34>
 8000fa4:	690b      	ldr	r3, [r1, #16]
 8000fa6:	b96b      	cbnz	r3, 8000fc4 <_svfiprintf_r+0x34>
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	f000 fae3 	bl	8001574 <_malloc_r>
 8000fae:	6020      	str	r0, [r4, #0]
 8000fb0:	6120      	str	r0, [r4, #16]
 8000fb2:	b928      	cbnz	r0, 8000fc0 <_svfiprintf_r+0x30>
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	f8c8 3000 	str.w	r3, [r8]
 8000fba:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbe:	e0c8      	b.n	8001152 <_svfiprintf_r+0x1c2>
 8000fc0:	2340      	movs	r3, #64	; 0x40
 8000fc2:	6163      	str	r3, [r4, #20]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8000fc8:	2320      	movs	r3, #32
 8000fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fce:	2330      	movs	r3, #48	; 0x30
 8000fd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fd4:	9503      	str	r5, [sp, #12]
 8000fd6:	f04f 0b01 	mov.w	fp, #1
 8000fda:	4637      	mov	r7, r6
 8000fdc:	463d      	mov	r5, r7
 8000fde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000fe2:	b10b      	cbz	r3, 8000fe8 <_svfiprintf_r+0x58>
 8000fe4:	2b25      	cmp	r3, #37	; 0x25
 8000fe6:	d13e      	bne.n	8001066 <_svfiprintf_r+0xd6>
 8000fe8:	ebb7 0a06 	subs.w	sl, r7, r6
 8000fec:	d00b      	beq.n	8001006 <_svfiprintf_r+0x76>
 8000fee:	4653      	mov	r3, sl
 8000ff0:	4632      	mov	r2, r6
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	f7ff ff70 	bl	8000eda <__ssputs_r>
 8000ffa:	3001      	adds	r0, #1
 8000ffc:	f000 80a4 	beq.w	8001148 <_svfiprintf_r+0x1b8>
 8001000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001002:	4453      	add	r3, sl
 8001004:	9309      	str	r3, [sp, #36]	; 0x24
 8001006:	783b      	ldrb	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 809d 	beq.w	8001148 <_svfiprintf_r+0x1b8>
 800100e:	2300      	movs	r3, #0
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001018:	9304      	str	r3, [sp, #16]
 800101a:	9307      	str	r3, [sp, #28]
 800101c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001020:	931a      	str	r3, [sp, #104]	; 0x68
 8001022:	462f      	mov	r7, r5
 8001024:	2205      	movs	r2, #5
 8001026:	f817 1b01 	ldrb.w	r1, [r7], #1
 800102a:	4850      	ldr	r0, [pc, #320]	; (800116c <_svfiprintf_r+0x1dc>)
 800102c:	f7ff f8e8 	bl	8000200 <memchr>
 8001030:	9b04      	ldr	r3, [sp, #16]
 8001032:	b9d0      	cbnz	r0, 800106a <_svfiprintf_r+0xda>
 8001034:	06d9      	lsls	r1, r3, #27
 8001036:	bf44      	itt	mi
 8001038:	2220      	movmi	r2, #32
 800103a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800103e:	071a      	lsls	r2, r3, #28
 8001040:	bf44      	itt	mi
 8001042:	222b      	movmi	r2, #43	; 0x2b
 8001044:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001048:	782a      	ldrb	r2, [r5, #0]
 800104a:	2a2a      	cmp	r2, #42	; 0x2a
 800104c:	d015      	beq.n	800107a <_svfiprintf_r+0xea>
 800104e:	9a07      	ldr	r2, [sp, #28]
 8001050:	462f      	mov	r7, r5
 8001052:	2000      	movs	r0, #0
 8001054:	250a      	movs	r5, #10
 8001056:	4639      	mov	r1, r7
 8001058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800105c:	3b30      	subs	r3, #48	; 0x30
 800105e:	2b09      	cmp	r3, #9
 8001060:	d94d      	bls.n	80010fe <_svfiprintf_r+0x16e>
 8001062:	b1b8      	cbz	r0, 8001094 <_svfiprintf_r+0x104>
 8001064:	e00f      	b.n	8001086 <_svfiprintf_r+0xf6>
 8001066:	462f      	mov	r7, r5
 8001068:	e7b8      	b.n	8000fdc <_svfiprintf_r+0x4c>
 800106a:	4a40      	ldr	r2, [pc, #256]	; (800116c <_svfiprintf_r+0x1dc>)
 800106c:	1a80      	subs	r0, r0, r2
 800106e:	fa0b f000 	lsl.w	r0, fp, r0
 8001072:	4318      	orrs	r0, r3
 8001074:	9004      	str	r0, [sp, #16]
 8001076:	463d      	mov	r5, r7
 8001078:	e7d3      	b.n	8001022 <_svfiprintf_r+0x92>
 800107a:	9a03      	ldr	r2, [sp, #12]
 800107c:	1d11      	adds	r1, r2, #4
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	9103      	str	r1, [sp, #12]
 8001082:	2a00      	cmp	r2, #0
 8001084:	db01      	blt.n	800108a <_svfiprintf_r+0xfa>
 8001086:	9207      	str	r2, [sp, #28]
 8001088:	e004      	b.n	8001094 <_svfiprintf_r+0x104>
 800108a:	4252      	negs	r2, r2
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	9207      	str	r2, [sp, #28]
 8001092:	9304      	str	r3, [sp, #16]
 8001094:	783b      	ldrb	r3, [r7, #0]
 8001096:	2b2e      	cmp	r3, #46	; 0x2e
 8001098:	d10c      	bne.n	80010b4 <_svfiprintf_r+0x124>
 800109a:	787b      	ldrb	r3, [r7, #1]
 800109c:	2b2a      	cmp	r3, #42	; 0x2a
 800109e:	d133      	bne.n	8001108 <_svfiprintf_r+0x178>
 80010a0:	9b03      	ldr	r3, [sp, #12]
 80010a2:	1d1a      	adds	r2, r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	9203      	str	r2, [sp, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bfb8      	it	lt
 80010ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80010b0:	3702      	adds	r7, #2
 80010b2:	9305      	str	r3, [sp, #20]
 80010b4:	4d2e      	ldr	r5, [pc, #184]	; (8001170 <_svfiprintf_r+0x1e0>)
 80010b6:	7839      	ldrb	r1, [r7, #0]
 80010b8:	2203      	movs	r2, #3
 80010ba:	4628      	mov	r0, r5
 80010bc:	f7ff f8a0 	bl	8000200 <memchr>
 80010c0:	b138      	cbz	r0, 80010d2 <_svfiprintf_r+0x142>
 80010c2:	2340      	movs	r3, #64	; 0x40
 80010c4:	1b40      	subs	r0, r0, r5
 80010c6:	fa03 f000 	lsl.w	r0, r3, r0
 80010ca:	9b04      	ldr	r3, [sp, #16]
 80010cc:	4303      	orrs	r3, r0
 80010ce:	3701      	adds	r7, #1
 80010d0:	9304      	str	r3, [sp, #16]
 80010d2:	7839      	ldrb	r1, [r7, #0]
 80010d4:	4827      	ldr	r0, [pc, #156]	; (8001174 <_svfiprintf_r+0x1e4>)
 80010d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010da:	2206      	movs	r2, #6
 80010dc:	1c7e      	adds	r6, r7, #1
 80010de:	f7ff f88f 	bl	8000200 <memchr>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d038      	beq.n	8001158 <_svfiprintf_r+0x1c8>
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <_svfiprintf_r+0x1e8>)
 80010e8:	bb13      	cbnz	r3, 8001130 <_svfiprintf_r+0x1a0>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	3307      	adds	r3, #7
 80010ee:	f023 0307 	bic.w	r3, r3, #7
 80010f2:	3308      	adds	r3, #8
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010f8:	444b      	add	r3, r9
 80010fa:	9309      	str	r3, [sp, #36]	; 0x24
 80010fc:	e76d      	b.n	8000fda <_svfiprintf_r+0x4a>
 80010fe:	fb05 3202 	mla	r2, r5, r2, r3
 8001102:	2001      	movs	r0, #1
 8001104:	460f      	mov	r7, r1
 8001106:	e7a6      	b.n	8001056 <_svfiprintf_r+0xc6>
 8001108:	2300      	movs	r3, #0
 800110a:	3701      	adds	r7, #1
 800110c:	9305      	str	r3, [sp, #20]
 800110e:	4619      	mov	r1, r3
 8001110:	250a      	movs	r5, #10
 8001112:	4638      	mov	r0, r7
 8001114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001118:	3a30      	subs	r2, #48	; 0x30
 800111a:	2a09      	cmp	r2, #9
 800111c:	d903      	bls.n	8001126 <_svfiprintf_r+0x196>
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0c8      	beq.n	80010b4 <_svfiprintf_r+0x124>
 8001122:	9105      	str	r1, [sp, #20]
 8001124:	e7c6      	b.n	80010b4 <_svfiprintf_r+0x124>
 8001126:	fb05 2101 	mla	r1, r5, r1, r2
 800112a:	2301      	movs	r3, #1
 800112c:	4607      	mov	r7, r0
 800112e:	e7f0      	b.n	8001112 <_svfiprintf_r+0x182>
 8001130:	ab03      	add	r3, sp, #12
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	4622      	mov	r2, r4
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <_svfiprintf_r+0x1ec>)
 8001138:	a904      	add	r1, sp, #16
 800113a:	4640      	mov	r0, r8
 800113c:	f3af 8000 	nop.w
 8001140:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001144:	4681      	mov	r9, r0
 8001146:	d1d6      	bne.n	80010f6 <_svfiprintf_r+0x166>
 8001148:	89a3      	ldrh	r3, [r4, #12]
 800114a:	065b      	lsls	r3, r3, #25
 800114c:	f53f af35 	bmi.w	8000fba <_svfiprintf_r+0x2a>
 8001150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001152:	b01d      	add	sp, #116	; 0x74
 8001154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001158:	ab03      	add	r3, sp, #12
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	4622      	mov	r2, r4
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_svfiprintf_r+0x1ec>)
 8001160:	a904      	add	r1, sp, #16
 8001162:	4640      	mov	r0, r8
 8001164:	f000 f882 	bl	800126c <_printf_i>
 8001168:	e7ea      	b.n	8001140 <_svfiprintf_r+0x1b0>
 800116a:	bf00      	nop
 800116c:	080019f5 	.word	0x080019f5
 8001170:	080019fb 	.word	0x080019fb
 8001174:	080019ff 	.word	0x080019ff
 8001178:	00000000 	.word	0x00000000
 800117c:	08000edb 	.word	0x08000edb

08001180 <_printf_common>:
 8001180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001184:	4691      	mov	r9, r2
 8001186:	461f      	mov	r7, r3
 8001188:	688a      	ldr	r2, [r1, #8]
 800118a:	690b      	ldr	r3, [r1, #16]
 800118c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001190:	4293      	cmp	r3, r2
 8001192:	bfb8      	it	lt
 8001194:	4613      	movlt	r3, r2
 8001196:	f8c9 3000 	str.w	r3, [r9]
 800119a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800119e:	4606      	mov	r6, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	b112      	cbz	r2, 80011aa <_printf_common+0x2a>
 80011a4:	3301      	adds	r3, #1
 80011a6:	f8c9 3000 	str.w	r3, [r9]
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	0699      	lsls	r1, r3, #26
 80011ae:	bf42      	ittt	mi
 80011b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80011b4:	3302      	addmi	r3, #2
 80011b6:	f8c9 3000 	strmi.w	r3, [r9]
 80011ba:	6825      	ldr	r5, [r4, #0]
 80011bc:	f015 0506 	ands.w	r5, r5, #6
 80011c0:	d107      	bne.n	80011d2 <_printf_common+0x52>
 80011c2:	f104 0a19 	add.w	sl, r4, #25
 80011c6:	68e3      	ldr	r3, [r4, #12]
 80011c8:	f8d9 2000 	ldr.w	r2, [r9]
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	42ab      	cmp	r3, r5
 80011d0:	dc28      	bgt.n	8001224 <_printf_common+0xa4>
 80011d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80011d6:	6822      	ldr	r2, [r4, #0]
 80011d8:	3300      	adds	r3, #0
 80011da:	bf18      	it	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	0692      	lsls	r2, r2, #26
 80011e0:	d42d      	bmi.n	800123e <_printf_common+0xbe>
 80011e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011e6:	4639      	mov	r1, r7
 80011e8:	4630      	mov	r0, r6
 80011ea:	47c0      	blx	r8
 80011ec:	3001      	adds	r0, #1
 80011ee:	d020      	beq.n	8001232 <_printf_common+0xb2>
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	68e5      	ldr	r5, [r4, #12]
 80011f4:	f8d9 2000 	ldr.w	r2, [r9]
 80011f8:	f003 0306 	and.w	r3, r3, #6
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	bf08      	it	eq
 8001200:	1aad      	subeq	r5, r5, r2
 8001202:	68a3      	ldr	r3, [r4, #8]
 8001204:	6922      	ldr	r2, [r4, #16]
 8001206:	bf0c      	ite	eq
 8001208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800120c:	2500      	movne	r5, #0
 800120e:	4293      	cmp	r3, r2
 8001210:	bfc4      	itt	gt
 8001212:	1a9b      	subgt	r3, r3, r2
 8001214:	18ed      	addgt	r5, r5, r3
 8001216:	f04f 0900 	mov.w	r9, #0
 800121a:	341a      	adds	r4, #26
 800121c:	454d      	cmp	r5, r9
 800121e:	d11a      	bne.n	8001256 <_printf_common+0xd6>
 8001220:	2000      	movs	r0, #0
 8001222:	e008      	b.n	8001236 <_printf_common+0xb6>
 8001224:	2301      	movs	r3, #1
 8001226:	4652      	mov	r2, sl
 8001228:	4639      	mov	r1, r7
 800122a:	4630      	mov	r0, r6
 800122c:	47c0      	blx	r8
 800122e:	3001      	adds	r0, #1
 8001230:	d103      	bne.n	800123a <_printf_common+0xba>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	3501      	adds	r5, #1
 800123c:	e7c3      	b.n	80011c6 <_printf_common+0x46>
 800123e:	18e1      	adds	r1, r4, r3
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	2030      	movs	r0, #48	; 0x30
 8001244:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001248:	4422      	add	r2, r4
 800124a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800124e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001252:	3302      	adds	r3, #2
 8001254:	e7c5      	b.n	80011e2 <_printf_common+0x62>
 8001256:	2301      	movs	r3, #1
 8001258:	4622      	mov	r2, r4
 800125a:	4639      	mov	r1, r7
 800125c:	4630      	mov	r0, r6
 800125e:	47c0      	blx	r8
 8001260:	3001      	adds	r0, #1
 8001262:	d0e6      	beq.n	8001232 <_printf_common+0xb2>
 8001264:	f109 0901 	add.w	r9, r9, #1
 8001268:	e7d8      	b.n	800121c <_printf_common+0x9c>
	...

0800126c <_printf_i>:
 800126c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001270:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001274:	460c      	mov	r4, r1
 8001276:	7e09      	ldrb	r1, [r1, #24]
 8001278:	b085      	sub	sp, #20
 800127a:	296e      	cmp	r1, #110	; 0x6e
 800127c:	4617      	mov	r7, r2
 800127e:	4606      	mov	r6, r0
 8001280:	4698      	mov	r8, r3
 8001282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001284:	f000 80b3 	beq.w	80013ee <_printf_i+0x182>
 8001288:	d822      	bhi.n	80012d0 <_printf_i+0x64>
 800128a:	2963      	cmp	r1, #99	; 0x63
 800128c:	d036      	beq.n	80012fc <_printf_i+0x90>
 800128e:	d80a      	bhi.n	80012a6 <_printf_i+0x3a>
 8001290:	2900      	cmp	r1, #0
 8001292:	f000 80b9 	beq.w	8001408 <_printf_i+0x19c>
 8001296:	2958      	cmp	r1, #88	; 0x58
 8001298:	f000 8083 	beq.w	80013a2 <_printf_i+0x136>
 800129c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80012a4:	e032      	b.n	800130c <_printf_i+0xa0>
 80012a6:	2964      	cmp	r1, #100	; 0x64
 80012a8:	d001      	beq.n	80012ae <_printf_i+0x42>
 80012aa:	2969      	cmp	r1, #105	; 0x69
 80012ac:	d1f6      	bne.n	800129c <_printf_i+0x30>
 80012ae:	6820      	ldr	r0, [r4, #0]
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	0605      	lsls	r5, r0, #24
 80012b4:	f103 0104 	add.w	r1, r3, #4
 80012b8:	d52a      	bpl.n	8001310 <_printf_i+0xa4>
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6011      	str	r1, [r2, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	da03      	bge.n	80012ca <_printf_i+0x5e>
 80012c2:	222d      	movs	r2, #45	; 0x2d
 80012c4:	425b      	negs	r3, r3
 80012c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80012ca:	486f      	ldr	r0, [pc, #444]	; (8001488 <_printf_i+0x21c>)
 80012cc:	220a      	movs	r2, #10
 80012ce:	e039      	b.n	8001344 <_printf_i+0xd8>
 80012d0:	2973      	cmp	r1, #115	; 0x73
 80012d2:	f000 809d 	beq.w	8001410 <_printf_i+0x1a4>
 80012d6:	d808      	bhi.n	80012ea <_printf_i+0x7e>
 80012d8:	296f      	cmp	r1, #111	; 0x6f
 80012da:	d020      	beq.n	800131e <_printf_i+0xb2>
 80012dc:	2970      	cmp	r1, #112	; 0x70
 80012de:	d1dd      	bne.n	800129c <_printf_i+0x30>
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	6023      	str	r3, [r4, #0]
 80012e8:	e003      	b.n	80012f2 <_printf_i+0x86>
 80012ea:	2975      	cmp	r1, #117	; 0x75
 80012ec:	d017      	beq.n	800131e <_printf_i+0xb2>
 80012ee:	2978      	cmp	r1, #120	; 0x78
 80012f0:	d1d4      	bne.n	800129c <_printf_i+0x30>
 80012f2:	2378      	movs	r3, #120	; 0x78
 80012f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80012f8:	4864      	ldr	r0, [pc, #400]	; (800148c <_printf_i+0x220>)
 80012fa:	e055      	b.n	80013a8 <_printf_i+0x13c>
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	1d19      	adds	r1, r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6011      	str	r1, [r2, #0]
 8001304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800130c:	2301      	movs	r3, #1
 800130e:	e08c      	b.n	800142a <_printf_i+0x1be>
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6011      	str	r1, [r2, #0]
 8001314:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001318:	bf18      	it	ne
 800131a:	b21b      	sxthne	r3, r3
 800131c:	e7cf      	b.n	80012be <_printf_i+0x52>
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	6825      	ldr	r5, [r4, #0]
 8001322:	1d18      	adds	r0, r3, #4
 8001324:	6010      	str	r0, [r2, #0]
 8001326:	0628      	lsls	r0, r5, #24
 8001328:	d501      	bpl.n	800132e <_printf_i+0xc2>
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	e002      	b.n	8001334 <_printf_i+0xc8>
 800132e:	0668      	lsls	r0, r5, #25
 8001330:	d5fb      	bpl.n	800132a <_printf_i+0xbe>
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4854      	ldr	r0, [pc, #336]	; (8001488 <_printf_i+0x21c>)
 8001336:	296f      	cmp	r1, #111	; 0x6f
 8001338:	bf14      	ite	ne
 800133a:	220a      	movne	r2, #10
 800133c:	2208      	moveq	r2, #8
 800133e:	2100      	movs	r1, #0
 8001340:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001344:	6865      	ldr	r5, [r4, #4]
 8001346:	60a5      	str	r5, [r4, #8]
 8001348:	2d00      	cmp	r5, #0
 800134a:	f2c0 8095 	blt.w	8001478 <_printf_i+0x20c>
 800134e:	6821      	ldr	r1, [r4, #0]
 8001350:	f021 0104 	bic.w	r1, r1, #4
 8001354:	6021      	str	r1, [r4, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d13d      	bne.n	80013d6 <_printf_i+0x16a>
 800135a:	2d00      	cmp	r5, #0
 800135c:	f040 808e 	bne.w	800147c <_printf_i+0x210>
 8001360:	4665      	mov	r5, ip
 8001362:	2a08      	cmp	r2, #8
 8001364:	d10b      	bne.n	800137e <_printf_i+0x112>
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	07db      	lsls	r3, r3, #31
 800136a:	d508      	bpl.n	800137e <_printf_i+0x112>
 800136c:	6923      	ldr	r3, [r4, #16]
 800136e:	6862      	ldr	r2, [r4, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	bfde      	ittt	le
 8001374:	2330      	movle	r3, #48	; 0x30
 8001376:	f805 3c01 	strble.w	r3, [r5, #-1]
 800137a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800137e:	ebac 0305 	sub.w	r3, ip, r5
 8001382:	6123      	str	r3, [r4, #16]
 8001384:	f8cd 8000 	str.w	r8, [sp]
 8001388:	463b      	mov	r3, r7
 800138a:	aa03      	add	r2, sp, #12
 800138c:	4621      	mov	r1, r4
 800138e:	4630      	mov	r0, r6
 8001390:	f7ff fef6 	bl	8001180 <_printf_common>
 8001394:	3001      	adds	r0, #1
 8001396:	d14d      	bne.n	8001434 <_printf_i+0x1c8>
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	b005      	add	sp, #20
 800139e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013a2:	4839      	ldr	r0, [pc, #228]	; (8001488 <_printf_i+0x21c>)
 80013a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80013a8:	6813      	ldr	r3, [r2, #0]
 80013aa:	6821      	ldr	r1, [r4, #0]
 80013ac:	1d1d      	adds	r5, r3, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6015      	str	r5, [r2, #0]
 80013b2:	060a      	lsls	r2, r1, #24
 80013b4:	d50b      	bpl.n	80013ce <_printf_i+0x162>
 80013b6:	07ca      	lsls	r2, r1, #31
 80013b8:	bf44      	itt	mi
 80013ba:	f041 0120 	orrmi.w	r1, r1, #32
 80013be:	6021      	strmi	r1, [r4, #0]
 80013c0:	b91b      	cbnz	r3, 80013ca <_printf_i+0x15e>
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	f022 0220 	bic.w	r2, r2, #32
 80013c8:	6022      	str	r2, [r4, #0]
 80013ca:	2210      	movs	r2, #16
 80013cc:	e7b7      	b.n	800133e <_printf_i+0xd2>
 80013ce:	064d      	lsls	r5, r1, #25
 80013d0:	bf48      	it	mi
 80013d2:	b29b      	uxthmi	r3, r3
 80013d4:	e7ef      	b.n	80013b6 <_printf_i+0x14a>
 80013d6:	4665      	mov	r5, ip
 80013d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80013dc:	fb02 3311 	mls	r3, r2, r1, r3
 80013e0:	5cc3      	ldrb	r3, [r0, r3]
 80013e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80013e6:	460b      	mov	r3, r1
 80013e8:	2900      	cmp	r1, #0
 80013ea:	d1f5      	bne.n	80013d8 <_printf_i+0x16c>
 80013ec:	e7b9      	b.n	8001362 <_printf_i+0xf6>
 80013ee:	6813      	ldr	r3, [r2, #0]
 80013f0:	6825      	ldr	r5, [r4, #0]
 80013f2:	6961      	ldr	r1, [r4, #20]
 80013f4:	1d18      	adds	r0, r3, #4
 80013f6:	6010      	str	r0, [r2, #0]
 80013f8:	0628      	lsls	r0, r5, #24
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	d501      	bpl.n	8001402 <_printf_i+0x196>
 80013fe:	6019      	str	r1, [r3, #0]
 8001400:	e002      	b.n	8001408 <_printf_i+0x19c>
 8001402:	066a      	lsls	r2, r5, #25
 8001404:	d5fb      	bpl.n	80013fe <_printf_i+0x192>
 8001406:	8019      	strh	r1, [r3, #0]
 8001408:	2300      	movs	r3, #0
 800140a:	6123      	str	r3, [r4, #16]
 800140c:	4665      	mov	r5, ip
 800140e:	e7b9      	b.n	8001384 <_printf_i+0x118>
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	1d19      	adds	r1, r3, #4
 8001414:	6011      	str	r1, [r2, #0]
 8001416:	681d      	ldr	r5, [r3, #0]
 8001418:	6862      	ldr	r2, [r4, #4]
 800141a:	2100      	movs	r1, #0
 800141c:	4628      	mov	r0, r5
 800141e:	f7fe feef 	bl	8000200 <memchr>
 8001422:	b108      	cbz	r0, 8001428 <_printf_i+0x1bc>
 8001424:	1b40      	subs	r0, r0, r5
 8001426:	6060      	str	r0, [r4, #4]
 8001428:	6863      	ldr	r3, [r4, #4]
 800142a:	6123      	str	r3, [r4, #16]
 800142c:	2300      	movs	r3, #0
 800142e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001432:	e7a7      	b.n	8001384 <_printf_i+0x118>
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	462a      	mov	r2, r5
 8001438:	4639      	mov	r1, r7
 800143a:	4630      	mov	r0, r6
 800143c:	47c0      	blx	r8
 800143e:	3001      	adds	r0, #1
 8001440:	d0aa      	beq.n	8001398 <_printf_i+0x12c>
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	079b      	lsls	r3, r3, #30
 8001446:	d413      	bmi.n	8001470 <_printf_i+0x204>
 8001448:	68e0      	ldr	r0, [r4, #12]
 800144a:	9b03      	ldr	r3, [sp, #12]
 800144c:	4298      	cmp	r0, r3
 800144e:	bfb8      	it	lt
 8001450:	4618      	movlt	r0, r3
 8001452:	e7a3      	b.n	800139c <_printf_i+0x130>
 8001454:	2301      	movs	r3, #1
 8001456:	464a      	mov	r2, r9
 8001458:	4639      	mov	r1, r7
 800145a:	4630      	mov	r0, r6
 800145c:	47c0      	blx	r8
 800145e:	3001      	adds	r0, #1
 8001460:	d09a      	beq.n	8001398 <_printf_i+0x12c>
 8001462:	3501      	adds	r5, #1
 8001464:	68e3      	ldr	r3, [r4, #12]
 8001466:	9a03      	ldr	r2, [sp, #12]
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	42ab      	cmp	r3, r5
 800146c:	dcf2      	bgt.n	8001454 <_printf_i+0x1e8>
 800146e:	e7eb      	b.n	8001448 <_printf_i+0x1dc>
 8001470:	2500      	movs	r5, #0
 8001472:	f104 0919 	add.w	r9, r4, #25
 8001476:	e7f5      	b.n	8001464 <_printf_i+0x1f8>
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ac      	bne.n	80013d6 <_printf_i+0x16a>
 800147c:	7803      	ldrb	r3, [r0, #0]
 800147e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001482:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001486:	e76c      	b.n	8001362 <_printf_i+0xf6>
 8001488:	08001a06 	.word	0x08001a06
 800148c:	08001a17 	.word	0x08001a17

08001490 <memcpy>:
 8001490:	b510      	push	{r4, lr}
 8001492:	1e43      	subs	r3, r0, #1
 8001494:	440a      	add	r2, r1
 8001496:	4291      	cmp	r1, r2
 8001498:	d100      	bne.n	800149c <memcpy+0xc>
 800149a:	bd10      	pop	{r4, pc}
 800149c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014a4:	e7f7      	b.n	8001496 <memcpy+0x6>

080014a6 <memmove>:
 80014a6:	4288      	cmp	r0, r1
 80014a8:	b510      	push	{r4, lr}
 80014aa:	eb01 0302 	add.w	r3, r1, r2
 80014ae:	d807      	bhi.n	80014c0 <memmove+0x1a>
 80014b0:	1e42      	subs	r2, r0, #1
 80014b2:	4299      	cmp	r1, r3
 80014b4:	d00a      	beq.n	80014cc <memmove+0x26>
 80014b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80014be:	e7f8      	b.n	80014b2 <memmove+0xc>
 80014c0:	4283      	cmp	r3, r0
 80014c2:	d9f5      	bls.n	80014b0 <memmove+0xa>
 80014c4:	1881      	adds	r1, r0, r2
 80014c6:	1ad2      	subs	r2, r2, r3
 80014c8:	42d3      	cmn	r3, r2
 80014ca:	d100      	bne.n	80014ce <memmove+0x28>
 80014cc:	bd10      	pop	{r4, pc}
 80014ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80014d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80014d6:	e7f7      	b.n	80014c8 <memmove+0x22>

080014d8 <_free_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4605      	mov	r5, r0
 80014dc:	2900      	cmp	r1, #0
 80014de:	d045      	beq.n	800156c <_free_r+0x94>
 80014e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014e4:	1f0c      	subs	r4, r1, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bfb8      	it	lt
 80014ea:	18e4      	addlt	r4, r4, r3
 80014ec:	f000 f8d2 	bl	8001694 <__malloc_lock>
 80014f0:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <_free_r+0x98>)
 80014f2:	6813      	ldr	r3, [r2, #0]
 80014f4:	4610      	mov	r0, r2
 80014f6:	b933      	cbnz	r3, 8001506 <_free_r+0x2e>
 80014f8:	6063      	str	r3, [r4, #4]
 80014fa:	6014      	str	r4, [r2, #0]
 80014fc:	4628      	mov	r0, r5
 80014fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001502:	f000 b8c8 	b.w	8001696 <__malloc_unlock>
 8001506:	42a3      	cmp	r3, r4
 8001508:	d90c      	bls.n	8001524 <_free_r+0x4c>
 800150a:	6821      	ldr	r1, [r4, #0]
 800150c:	1862      	adds	r2, r4, r1
 800150e:	4293      	cmp	r3, r2
 8001510:	bf04      	itt	eq
 8001512:	681a      	ldreq	r2, [r3, #0]
 8001514:	685b      	ldreq	r3, [r3, #4]
 8001516:	6063      	str	r3, [r4, #4]
 8001518:	bf04      	itt	eq
 800151a:	1852      	addeq	r2, r2, r1
 800151c:	6022      	streq	r2, [r4, #0]
 800151e:	6004      	str	r4, [r0, #0]
 8001520:	e7ec      	b.n	80014fc <_free_r+0x24>
 8001522:	4613      	mov	r3, r2
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	b10a      	cbz	r2, 800152c <_free_r+0x54>
 8001528:	42a2      	cmp	r2, r4
 800152a:	d9fa      	bls.n	8001522 <_free_r+0x4a>
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	1858      	adds	r0, r3, r1
 8001530:	42a0      	cmp	r0, r4
 8001532:	d10b      	bne.n	800154c <_free_r+0x74>
 8001534:	6820      	ldr	r0, [r4, #0]
 8001536:	4401      	add	r1, r0
 8001538:	1858      	adds	r0, r3, r1
 800153a:	4282      	cmp	r2, r0
 800153c:	6019      	str	r1, [r3, #0]
 800153e:	d1dd      	bne.n	80014fc <_free_r+0x24>
 8001540:	6810      	ldr	r0, [r2, #0]
 8001542:	6852      	ldr	r2, [r2, #4]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	4401      	add	r1, r0
 8001548:	6019      	str	r1, [r3, #0]
 800154a:	e7d7      	b.n	80014fc <_free_r+0x24>
 800154c:	d902      	bls.n	8001554 <_free_r+0x7c>
 800154e:	230c      	movs	r3, #12
 8001550:	602b      	str	r3, [r5, #0]
 8001552:	e7d3      	b.n	80014fc <_free_r+0x24>
 8001554:	6820      	ldr	r0, [r4, #0]
 8001556:	1821      	adds	r1, r4, r0
 8001558:	428a      	cmp	r2, r1
 800155a:	bf04      	itt	eq
 800155c:	6811      	ldreq	r1, [r2, #0]
 800155e:	6852      	ldreq	r2, [r2, #4]
 8001560:	6062      	str	r2, [r4, #4]
 8001562:	bf04      	itt	eq
 8001564:	1809      	addeq	r1, r1, r0
 8001566:	6021      	streq	r1, [r4, #0]
 8001568:	605c      	str	r4, [r3, #4]
 800156a:	e7c7      	b.n	80014fc <_free_r+0x24>
 800156c:	bd38      	pop	{r3, r4, r5, pc}
 800156e:	bf00      	nop
 8001570:	200001f4 	.word	0x200001f4

08001574 <_malloc_r>:
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	1ccd      	adds	r5, r1, #3
 8001578:	f025 0503 	bic.w	r5, r5, #3
 800157c:	3508      	adds	r5, #8
 800157e:	2d0c      	cmp	r5, #12
 8001580:	bf38      	it	cc
 8001582:	250c      	movcc	r5, #12
 8001584:	2d00      	cmp	r5, #0
 8001586:	4606      	mov	r6, r0
 8001588:	db01      	blt.n	800158e <_malloc_r+0x1a>
 800158a:	42a9      	cmp	r1, r5
 800158c:	d903      	bls.n	8001596 <_malloc_r+0x22>
 800158e:	230c      	movs	r3, #12
 8001590:	6033      	str	r3, [r6, #0]
 8001592:	2000      	movs	r0, #0
 8001594:	bd70      	pop	{r4, r5, r6, pc}
 8001596:	f000 f87d 	bl	8001694 <__malloc_lock>
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <_malloc_r+0xac>)
 800159c:	6814      	ldr	r4, [r2, #0]
 800159e:	4621      	mov	r1, r4
 80015a0:	b991      	cbnz	r1, 80015c8 <_malloc_r+0x54>
 80015a2:	4c20      	ldr	r4, [pc, #128]	; (8001624 <_malloc_r+0xb0>)
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	b91b      	cbnz	r3, 80015b0 <_malloc_r+0x3c>
 80015a8:	4630      	mov	r0, r6
 80015aa:	f000 f863 	bl	8001674 <_sbrk_r>
 80015ae:	6020      	str	r0, [r4, #0]
 80015b0:	4629      	mov	r1, r5
 80015b2:	4630      	mov	r0, r6
 80015b4:	f000 f85e 	bl	8001674 <_sbrk_r>
 80015b8:	1c43      	adds	r3, r0, #1
 80015ba:	d124      	bne.n	8001606 <_malloc_r+0x92>
 80015bc:	230c      	movs	r3, #12
 80015be:	6033      	str	r3, [r6, #0]
 80015c0:	4630      	mov	r0, r6
 80015c2:	f000 f868 	bl	8001696 <__malloc_unlock>
 80015c6:	e7e4      	b.n	8001592 <_malloc_r+0x1e>
 80015c8:	680b      	ldr	r3, [r1, #0]
 80015ca:	1b5b      	subs	r3, r3, r5
 80015cc:	d418      	bmi.n	8001600 <_malloc_r+0x8c>
 80015ce:	2b0b      	cmp	r3, #11
 80015d0:	d90f      	bls.n	80015f2 <_malloc_r+0x7e>
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	50cd      	str	r5, [r1, r3]
 80015d6:	18cc      	adds	r4, r1, r3
 80015d8:	4630      	mov	r0, r6
 80015da:	f000 f85c 	bl	8001696 <__malloc_unlock>
 80015de:	f104 000b 	add.w	r0, r4, #11
 80015e2:	1d23      	adds	r3, r4, #4
 80015e4:	f020 0007 	bic.w	r0, r0, #7
 80015e8:	1ac3      	subs	r3, r0, r3
 80015ea:	d0d3      	beq.n	8001594 <_malloc_r+0x20>
 80015ec:	425a      	negs	r2, r3
 80015ee:	50e2      	str	r2, [r4, r3]
 80015f0:	e7d0      	b.n	8001594 <_malloc_r+0x20>
 80015f2:	428c      	cmp	r4, r1
 80015f4:	684b      	ldr	r3, [r1, #4]
 80015f6:	bf16      	itet	ne
 80015f8:	6063      	strne	r3, [r4, #4]
 80015fa:	6013      	streq	r3, [r2, #0]
 80015fc:	460c      	movne	r4, r1
 80015fe:	e7eb      	b.n	80015d8 <_malloc_r+0x64>
 8001600:	460c      	mov	r4, r1
 8001602:	6849      	ldr	r1, [r1, #4]
 8001604:	e7cc      	b.n	80015a0 <_malloc_r+0x2c>
 8001606:	1cc4      	adds	r4, r0, #3
 8001608:	f024 0403 	bic.w	r4, r4, #3
 800160c:	42a0      	cmp	r0, r4
 800160e:	d005      	beq.n	800161c <_malloc_r+0xa8>
 8001610:	1a21      	subs	r1, r4, r0
 8001612:	4630      	mov	r0, r6
 8001614:	f000 f82e 	bl	8001674 <_sbrk_r>
 8001618:	3001      	adds	r0, #1
 800161a:	d0cf      	beq.n	80015bc <_malloc_r+0x48>
 800161c:	6025      	str	r5, [r4, #0]
 800161e:	e7db      	b.n	80015d8 <_malloc_r+0x64>
 8001620:	200001f4 	.word	0x200001f4
 8001624:	200001f8 	.word	0x200001f8

08001628 <_realloc_r>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	4607      	mov	r7, r0
 800162c:	4614      	mov	r4, r2
 800162e:	460e      	mov	r6, r1
 8001630:	b921      	cbnz	r1, 800163c <_realloc_r+0x14>
 8001632:	4611      	mov	r1, r2
 8001634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001638:	f7ff bf9c 	b.w	8001574 <_malloc_r>
 800163c:	b922      	cbnz	r2, 8001648 <_realloc_r+0x20>
 800163e:	f7ff ff4b 	bl	80014d8 <_free_r>
 8001642:	4625      	mov	r5, r4
 8001644:	4628      	mov	r0, r5
 8001646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001648:	f000 f826 	bl	8001698 <_malloc_usable_size_r>
 800164c:	42a0      	cmp	r0, r4
 800164e:	d20f      	bcs.n	8001670 <_realloc_r+0x48>
 8001650:	4621      	mov	r1, r4
 8001652:	4638      	mov	r0, r7
 8001654:	f7ff ff8e 	bl	8001574 <_malloc_r>
 8001658:	4605      	mov	r5, r0
 800165a:	2800      	cmp	r0, #0
 800165c:	d0f2      	beq.n	8001644 <_realloc_r+0x1c>
 800165e:	4631      	mov	r1, r6
 8001660:	4622      	mov	r2, r4
 8001662:	f7ff ff15 	bl	8001490 <memcpy>
 8001666:	4631      	mov	r1, r6
 8001668:	4638      	mov	r0, r7
 800166a:	f7ff ff35 	bl	80014d8 <_free_r>
 800166e:	e7e9      	b.n	8001644 <_realloc_r+0x1c>
 8001670:	4635      	mov	r5, r6
 8001672:	e7e7      	b.n	8001644 <_realloc_r+0x1c>

08001674 <_sbrk_r>:
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	4c06      	ldr	r4, [pc, #24]	; (8001690 <_sbrk_r+0x1c>)
 8001678:	2300      	movs	r3, #0
 800167a:	4605      	mov	r5, r0
 800167c:	4608      	mov	r0, r1
 800167e:	6023      	str	r3, [r4, #0]
 8001680:	f7ff f936 	bl	80008f0 <_sbrk>
 8001684:	1c43      	adds	r3, r0, #1
 8001686:	d102      	bne.n	800168e <_sbrk_r+0x1a>
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	b103      	cbz	r3, 800168e <_sbrk_r+0x1a>
 800168c:	602b      	str	r3, [r5, #0]
 800168e:	bd38      	pop	{r3, r4, r5, pc}
 8001690:	200001fc 	.word	0x200001fc

08001694 <__malloc_lock>:
 8001694:	4770      	bx	lr

08001696 <__malloc_unlock>:
 8001696:	4770      	bx	lr

08001698 <_malloc_usable_size_r>:
 8001698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800169c:	1f18      	subs	r0, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bfbc      	itt	lt
 80016a2:	580b      	ldrlt	r3, [r1, r0]
 80016a4:	18c0      	addlt	r0, r0, r3
 80016a6:	4770      	bx	lr

080016a8 <_init>:
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016aa:	bf00      	nop
 80016ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ae:	bc08      	pop	{r3}
 80016b0:	469e      	mov	lr, r3
 80016b2:	4770      	bx	lr

080016b4 <_fini>:
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b6:	bf00      	nop
 80016b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ba:	bc08      	pop	{r3}
 80016bc:	469e      	mov	lr, r3
 80016be:	4770      	bx	lr
