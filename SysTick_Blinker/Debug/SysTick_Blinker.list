
SysTick_Blinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001050  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080011e0  080011e0  000111e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001280  08001280  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001280  08001280  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001280  08001280  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001280  08001280  00011280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  080012ec  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080012ec  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dd8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008f4  00000000  00000000  00022e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000178  00000000  00000000  00023760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  000238d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024bd7  00000000  00000000  000239d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002818  00000000  00000000  000485af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2342  00000000  00000000  0004adc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007e0  00000000  00000000  0012d184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080011c8 	.word	0x080011c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080011c8 	.word	0x080011c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LED_Init>:
//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
#define LED_PIN 5

void LED_Init(void){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <LED_Init+0x7c>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <LED_Init+0x7c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*LED_PIN));  
 8000280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1U<<(2*LED_PIN);      //  Output(01)
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029e:	6013      	str	r3, [r2, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*LED_PIN));
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002ae:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=   3U<<(2*LED_PIN);  // High speed
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ba:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80002be:	6093      	str	r3, [r2, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<LED_PIN);       // Push-pull
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ca:	f023 0320 	bic.w	r3, r3, #32
 80002ce:	6053      	str	r3, [r2, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*LED_PIN));  // No pull-up, no pull-down
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002de:	60d3      	str	r3, [r2, #12]
	
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000

080002f0 <LED_Toggle>:
}

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(void){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (1UL<<LED_PIN);
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002fe:	f083 0320 	eor.w	r3, r3, #32
 8000302:	6153      	str	r3, [r2, #20]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000316:	4b6b      	ldr	r3, [pc, #428]	; (80004c4 <System_Clock_Init+0x1b4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a6a      	ldr	r2, [pc, #424]	; (80004c4 <System_Clock_Init+0x1b4>)
 800031c:	f023 0307 	bic.w	r3, r3, #7
 8000320:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000322:	4b68      	ldr	r3, [pc, #416]	; (80004c4 <System_Clock_Init+0x1b4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a67      	ldr	r2, [pc, #412]	; (80004c4 <System_Clock_Init+0x1b4>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 800032e:	4b66      	ldr	r3, [pc, #408]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a65      	ldr	r2, [pc, #404]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000338:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 800033a:	bf00      	nop
 800033c:	4b62      	ldr	r3, [pc, #392]	; (80004c8 <System_Clock_Init+0x1b8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000348:	2310      	movs	r3, #16
 800034a:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 800034c:	4b5e      	ldr	r3, [pc, #376]	; (80004c8 <System_Clock_Init+0x1b8>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a5d      	ldr	r2, [pc, #372]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000352:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000356:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000358:	4b5b      	ldr	r3, [pc, #364]	; (80004c8 <System_Clock_Init+0x1b8>)
 800035a:	685a      	ldr	r2, [r3, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	061b      	lsls	r3, r3, #24
 8000360:	4959      	ldr	r1, [pc, #356]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000362:	4313      	orrs	r3, r2
 8000364:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000366:	4b58      	ldr	r3, [pc, #352]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a57      	ldr	r2, [pc, #348]	; (80004c8 <System_Clock_Init+0x1b8>)
 800036c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000370:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000372:	bf00      	nop
 8000374:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800037c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000380:	d0f8      	beq.n	8000374 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000382:	4b51      	ldr	r3, [pc, #324]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	4a50      	ldr	r2, [pc, #320]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000388:	f023 0303 	bic.w	r3, r3, #3
 800038c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800038e:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	4a4d      	ldr	r2, [pc, #308]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000394:	f043 0302 	orr.w	r3, r3, #2
 8000398:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800039a:	4b4b      	ldr	r3, [pc, #300]	; (80004c8 <System_Clock_Init+0x1b8>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80003a2:	4a49      	ldr	r2, [pc, #292]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003a4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80003a8:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 80003aa:	4b47      	ldr	r3, [pc, #284]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80003b2:	4a45      	ldr	r2, [pc, #276]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003b4:	f043 0310 	orr.w	r3, r3, #16
 80003b8:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 80003ba:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	4a42      	ldr	r2, [pc, #264]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80003c4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 80003c6:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003d0:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 80003d2:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a3c      	ldr	r2, [pc, #240]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003dc:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80003de:	bf00      	nop
 80003e0:	4b39      	ldr	r3, [pc, #228]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0f9      	beq.n	80003e0 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80003ec:	4b36      	ldr	r3, [pc, #216]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a35      	ldr	r2, [pc, #212]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003f2:	f023 0303 	bic.w	r3, r3, #3
 80003f6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80003f8:	4b33      	ldr	r3, [pc, #204]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4a32      	ldr	r2, [pc, #200]	; (80004c8 <System_Clock_Init+0x1b8>)
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000404:	bf00      	nop
 8000406:	4b30      	ldr	r3, [pc, #192]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	f003 030c 	and.w	r3, r3, #12
 800040e:	2b0c      	cmp	r3, #12
 8000410:	d1f9      	bne.n	8000406 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8000412:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	4a2c      	ldr	r2, [pc, #176]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800041c:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 800041e:	4b2a      	ldr	r3, [pc, #168]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000424:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000428:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 800042a:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <System_Clock_Init+0x1b8>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	4a26      	ldr	r2, [pc, #152]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000430:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000434:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000436:	4b24      	ldr	r3, [pc, #144]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a23      	ldr	r2, [pc, #140]	; (80004c8 <System_Clock_Init+0x1b8>)
 800043c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000440:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 8000442:	bf00      	nop
 8000444:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800044c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000450:	d0f8      	beq.n	8000444 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000454:	691b      	ldr	r3, [r3, #16]
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800045c:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000464:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000468:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <System_Clock_Init+0x1b8>)
 800046c:	691b      	ldr	r3, [r3, #16]
 800046e:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000478:	691b      	ldr	r3, [r3, #16]
 800047a:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <System_Clock_Init+0x1b8>)
 800047c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000480:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800048c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800048e:	bf00      	nop
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <System_Clock_Init+0x1b8>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <System_Clock_Init+0x1b8>)
 800049e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a2:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <System_Clock_Init+0x1b8>)
 80004a4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80004a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <System_Clock_Init+0x1b8>)
 80004ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b0:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <System_Clock_Init+0x1b8>)
 80004b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004b6:	6613      	str	r3, [r2, #96]	; 0x60
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	40022000 	.word	0x40022000
 80004c8:	40021000 	.word	0x40021000

080004cc <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <UART2_Init+0x40>)
 80004d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <UART2_Init+0x40>)
 80004d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004da:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <UART2_Init+0x40>)
 80004de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <UART2_Init+0x40>)
 80004e4:	f023 030c 	bic.w	r3, r3, #12
 80004e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <UART2_Init+0x40>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <UART2_Init+0x40>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 80004fc:	f000 f80a 	bl	8000514 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <UART2_Init+0x44>)
 8000502:	f000 f84f 	bl	80005a4 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	40004400 	.word	0x40004400

08000514 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000518:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <UART2_GPIO_Init+0x8c>)
 800051a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051c:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <UART2_GPIO_Init+0x8c>)
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000524:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800052e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000532:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000542:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800054e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000552:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000554:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000558:	6a1b      	ldr	r3, [r3, #32]
 800055a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800055e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000562:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800056e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000572:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800057e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000582:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058e:	f023 030c 	bic.w	r3, r3, #12
 8000592:	6053      	str	r3, [r2, #4]
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f023 0201 	bic.w	r2, r3, #1
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f242 028d 	movw	r2, #8333	; 0x208d
 80005e2:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f043 020c 	orr.w	r2, r3, #12
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <USART_Init+0xfc>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d129      	bne.n	800064c <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f043 0220 	orr.w	r2, r3, #32
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 0210 	bic.w	r2, r3, #16
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f023 0201 	bic.w	r2, r3, #1
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <USART_Init+0x100>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d10b      	bne.n	800066c <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6a1b      	ldr	r3, [r3, #32]
 8000658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <USART_Init+0x104>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <USART_Init+0x104>)
 8000666:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800066a:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f043 0201 	orr.w	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000678:	bf00      	nop
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f9      	beq.n	800067a <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000686:	bf00      	nop
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0f9      	beq.n	8000688 <USART_Init+0xe4>
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40004c00 	.word	0x40004c00
 80006a4:	40004400 	.word	0x40004400
 80006a8:	40013800 	.word	0x40013800

080006ac <USART_Write>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e014      	b.n	80006e8 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80006be:	bf00      	nop
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0f9      	beq.n	80006c0 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80006da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006de:	f000 f819 	bl	8000714 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3301      	adds	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8e6      	bhi.n	80006be <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80006f0:	bf00      	nop
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	61da      	str	r2, [r3, #28]
}   
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2264      	movs	r2, #100	; 0x64
 8000720:	fb02 f203 	mul.w	r2, r2, r3
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <USART_Delay+0x38>)
 8000726:	fba3 1302 	umull	r1, r3, r3, r2
 800072a:	1ad2      	subs	r2, r2, r3
 800072c:	0852      	lsrs	r2, r2, #1
 800072e:	4413      	add	r3, r2
 8000730:	089b      	lsrs	r3, r3, #2
 8000732:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3b01      	subs	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f9      	bne.n	8000734 <USART_Delay+0x20>
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	24924925 	.word	0x24924925

08000750 <init_systick>:
	for (int i = 0; i < value; i++)
		;
}

static void init_systick()
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	// Set the LOAD (RVR) to 8 million to give us a 100 milliseconds timer.
	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	// Set the enable bit in the CTRL (CSR) to start the timer.
	SysTick->CTRL = 0 ; 	//Clear CSR register
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <init_systick+0x34>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 8000000 ;	//Set RVR to 8 mil
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <init_systick+0x34>)
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <init_systick+0x38>)
 800075e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL |= 4 ;		//set clock source to internal board clock
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <init_systick+0x34>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <init_systick+0x34>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= 1 ;		//turn on systick clock
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <init_systick+0x34>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <init_systick+0x34>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010
 8000788:	007a1200 	.word	0x007a1200

0800078c <delay_systick>:

static void delay_systick()
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
	// Using the SysTick global structure pointer do the following:
	// Create a for loop that loops 10 times
	// Inside that for loop check the COUNTFLAG bit in the CTRL (CSR)
	// register in a loop. When that bit is set exit this inner loop
	// to do another pass in the outer loop of 10.
	for ( int i = 0 ; i < 10 ; i++ )
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	e009      	b.n	80007ac <delay_systick+0x20>
			while ( ( SysTick->CTRL & 0x10000 ) == 0 )	//checks countflag bit, count down.
 8000798:	bf00      	nop
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <delay_systick+0x34>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f9      	beq.n	800079a <delay_systick+0xe>
	for ( int i = 0 ; i < 10 ; i++ )
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3301      	adds	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b09      	cmp	r3, #9
 80007b0:	ddf2      	ble.n	8000798 <delay_systick+0xc>
				;
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <demo_of_UART_print>:

static void demo_of_UART_print(int a){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	int n ;
	uint8_t buffer[BUFFER_SIZE];

	n = sprintf((char *)buffer, "a = %d\r\n", a);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	490a      	ldr	r1, [pc, #40]	; (80007fc <demo_of_UART_print+0x38>)
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f8f1 	bl	80009bc <siprintf>
 80007da:	62f8      	str	r0, [r7, #44]	; 0x2c
	USART_Write(USART2, buffer, n);
 80007dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	4806      	ldr	r0, [pc, #24]	; (8000800 <demo_of_UART_print+0x3c>)
 80007e6:	f7ff ff61 	bl	80006ac <USART_Write>

	//delay_loop( 8000000 ) ;	// comment this out when you are ready to test delay_systick
	delay_systick() ;	// enable this when you are ready to test
 80007ea:	f7ff ffcf 	bl	800078c <delay_systick>

	LED_Toggle();
 80007ee:	f7ff fd7f 	bl	80002f0 <LED_Toggle>
}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	080011e0 	.word	0x080011e0
 8000800:	40004400 	.word	0x40004400

08000804 <run_demo>:

void run_demo(){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
	int a = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]

	init_systick() ;
 800080e:	f7ff ff9f 	bl	8000750 <init_systick>

	while (1){
		//demo_of_printf_scanf();
		demo_of_UART_print(a);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffd6 	bl	80007c4 <demo_of_UART_print>
		a++;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3301      	adds	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
		demo_of_UART_print(a);
 800081e:	e7f8      	b.n	8000812 <run_demo+0xe>

08000820 <main>:
#include "LED.h"
#include "UART.h"
#include "demo.h"

	
int main(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000824:	f7ff fd74 	bl	8000310 <System_Clock_Init>
	LED_Init();
 8000828:	f7ff fd22 	bl	8000270 <LED_Init>
	UART2_Init();
 800082c:	f7ff fe4e 	bl	80004cc <UART2_Init>
	
	// application run function
	run_demo() ;
 8000830:	f7ff ffe8 	bl	8000804 <run_demo>
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <_sbrk+0x5c>)
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <_sbrk+0x60>)
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <_sbrk+0x64>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <_sbrk+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	429a      	cmp	r2, r3
 800086a:	d207      	bcs.n	800087c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800086c:	f000 f87c 	bl	8000968 <__errno>
 8000870:	4602      	mov	r2, r0
 8000872:	230c      	movs	r3, #12
 8000874:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	e009      	b.n	8000890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <_sbrk+0x64>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <_sbrk+0x64>)
 800088c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088e:	68fb      	ldr	r3, [r7, #12]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20018000 	.word	0x20018000
 800089c:	00000400 	.word	0x00000400
 80008a0:	20000080 	.word	0x20000080
 80008a4:	20000090 	.word	0x20000090

080008a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <SystemInit+0x64>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a16      	ldr	r2, [pc, #88]	; (800090c <SystemInit+0x64>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <SystemInit+0x68>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <SystemInit+0x68>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <SystemInit+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <SystemInit+0x68>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <SystemInit+0x68>)
 80008d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <SystemInit+0x68>)
 80008e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <SystemInit+0x68>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <SystemInit+0x68>)
 80008ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <SystemInit+0x68>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <SystemInit+0x64>)
 80008fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	40021000 	.word	0x40021000

08000914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff ffc6 	bl	80008a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800091c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800091e:	e003      	b.n	8000928 <LoopCopyDataInit>

08000920 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000922:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000924:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000926:	3104      	adds	r1, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <LoopForever+0xa>)
	ldr	r3, =_edata
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <LoopForever+0xe>)
	adds	r2, r0, r1
 800092c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800092e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000930:	d3f6      	bcc.n	8000920 <CopyDataInit>
	ldr	r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000934:	e002      	b.n	800093c <LoopFillZerobss>

08000936 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000936:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000938:	f842 3b04 	str.w	r3, [r2], #4

0800093c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <LoopForever+0x16>)
	cmp	r2, r3
 800093e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000940:	d3f9      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f000 f817 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000946:	f7ff ff6b 	bl	8000820 <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000950:	08001288 	.word	0x08001288
	ldr	r0, =_sdata
 8000954:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000958:	20000064 	.word	0x20000064
	ldr	r2, =_sbss
 800095c:	20000064 	.word	0x20000064
	ldr	r3, = _ebss
 8000960:	20000090 	.word	0x20000090

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>
	...

08000968 <__errno>:
 8000968:	4b01      	ldr	r3, [pc, #4]	; (8000970 <__errno+0x8>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4e0d      	ldr	r6, [pc, #52]	; (80009ac <__libc_init_array+0x38>)
 8000978:	4c0d      	ldr	r4, [pc, #52]	; (80009b0 <__libc_init_array+0x3c>)
 800097a:	1ba4      	subs	r4, r4, r6
 800097c:	10a4      	asrs	r4, r4, #2
 800097e:	2500      	movs	r5, #0
 8000980:	42a5      	cmp	r5, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	4e0b      	ldr	r6, [pc, #44]	; (80009b4 <__libc_init_array+0x40>)
 8000986:	4c0c      	ldr	r4, [pc, #48]	; (80009b8 <__libc_init_array+0x44>)
 8000988:	f000 fc1e 	bl	80011c8 <_init>
 800098c:	1ba4      	subs	r4, r4, r6
 800098e:	10a4      	asrs	r4, r4, #2
 8000990:	2500      	movs	r5, #0
 8000992:	42a5      	cmp	r5, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800099c:	4798      	blx	r3
 800099e:	3501      	adds	r5, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009a6:	4798      	blx	r3
 80009a8:	3501      	adds	r5, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	08001280 	.word	0x08001280
 80009b0:	08001280 	.word	0x08001280
 80009b4:	08001280 	.word	0x08001280
 80009b8:	08001284 	.word	0x08001284

080009bc <siprintf>:
 80009bc:	b40e      	push	{r1, r2, r3}
 80009be:	b500      	push	{lr}
 80009c0:	b09c      	sub	sp, #112	; 0x70
 80009c2:	ab1d      	add	r3, sp, #116	; 0x74
 80009c4:	9002      	str	r0, [sp, #8]
 80009c6:	9006      	str	r0, [sp, #24]
 80009c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <siprintf+0x38>)
 80009ce:	9107      	str	r1, [sp, #28]
 80009d0:	9104      	str	r1, [sp, #16]
 80009d2:	4909      	ldr	r1, [pc, #36]	; (80009f8 <siprintf+0x3c>)
 80009d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80009d8:	9105      	str	r1, [sp, #20]
 80009da:	6800      	ldr	r0, [r0, #0]
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	a902      	add	r1, sp, #8
 80009e0:	f000 f8c0 	bl	8000b64 <_svfiprintf_r>
 80009e4:	9b02      	ldr	r3, [sp, #8]
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	b01c      	add	sp, #112	; 0x70
 80009ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80009f0:	b003      	add	sp, #12
 80009f2:	4770      	bx	lr
 80009f4:	20000000 	.word	0x20000000
 80009f8:	ffff0208 	.word	0xffff0208

080009fc <_malloc_r>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	1ccd      	adds	r5, r1, #3
 8000a00:	f025 0503 	bic.w	r5, r5, #3
 8000a04:	3508      	adds	r5, #8
 8000a06:	2d0c      	cmp	r5, #12
 8000a08:	bf38      	it	cc
 8000a0a:	250c      	movcc	r5, #12
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	4606      	mov	r6, r0
 8000a10:	db01      	blt.n	8000a16 <_malloc_r+0x1a>
 8000a12:	42a9      	cmp	r1, r5
 8000a14:	d903      	bls.n	8000a1e <_malloc_r+0x22>
 8000a16:	230c      	movs	r3, #12
 8000a18:	6033      	str	r3, [r6, #0]
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
 8000a1e:	f000 fb55 	bl	80010cc <__malloc_lock>
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <_malloc_r+0xac>)
 8000a24:	6814      	ldr	r4, [r2, #0]
 8000a26:	4621      	mov	r1, r4
 8000a28:	b991      	cbnz	r1, 8000a50 <_malloc_r+0x54>
 8000a2a:	4c20      	ldr	r4, [pc, #128]	; (8000aac <_malloc_r+0xb0>)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	b91b      	cbnz	r3, 8000a38 <_malloc_r+0x3c>
 8000a30:	4630      	mov	r0, r6
 8000a32:	f000 fb17 	bl	8001064 <_sbrk_r>
 8000a36:	6020      	str	r0, [r4, #0]
 8000a38:	4629      	mov	r1, r5
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	f000 fb12 	bl	8001064 <_sbrk_r>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d124      	bne.n	8000a8e <_malloc_r+0x92>
 8000a44:	230c      	movs	r3, #12
 8000a46:	6033      	str	r3, [r6, #0]
 8000a48:	4630      	mov	r0, r6
 8000a4a:	f000 fb40 	bl	80010ce <__malloc_unlock>
 8000a4e:	e7e4      	b.n	8000a1a <_malloc_r+0x1e>
 8000a50:	680b      	ldr	r3, [r1, #0]
 8000a52:	1b5b      	subs	r3, r3, r5
 8000a54:	d418      	bmi.n	8000a88 <_malloc_r+0x8c>
 8000a56:	2b0b      	cmp	r3, #11
 8000a58:	d90f      	bls.n	8000a7a <_malloc_r+0x7e>
 8000a5a:	600b      	str	r3, [r1, #0]
 8000a5c:	50cd      	str	r5, [r1, r3]
 8000a5e:	18cc      	adds	r4, r1, r3
 8000a60:	4630      	mov	r0, r6
 8000a62:	f000 fb34 	bl	80010ce <__malloc_unlock>
 8000a66:	f104 000b 	add.w	r0, r4, #11
 8000a6a:	1d23      	adds	r3, r4, #4
 8000a6c:	f020 0007 	bic.w	r0, r0, #7
 8000a70:	1ac3      	subs	r3, r0, r3
 8000a72:	d0d3      	beq.n	8000a1c <_malloc_r+0x20>
 8000a74:	425a      	negs	r2, r3
 8000a76:	50e2      	str	r2, [r4, r3]
 8000a78:	e7d0      	b.n	8000a1c <_malloc_r+0x20>
 8000a7a:	428c      	cmp	r4, r1
 8000a7c:	684b      	ldr	r3, [r1, #4]
 8000a7e:	bf16      	itet	ne
 8000a80:	6063      	strne	r3, [r4, #4]
 8000a82:	6013      	streq	r3, [r2, #0]
 8000a84:	460c      	movne	r4, r1
 8000a86:	e7eb      	b.n	8000a60 <_malloc_r+0x64>
 8000a88:	460c      	mov	r4, r1
 8000a8a:	6849      	ldr	r1, [r1, #4]
 8000a8c:	e7cc      	b.n	8000a28 <_malloc_r+0x2c>
 8000a8e:	1cc4      	adds	r4, r0, #3
 8000a90:	f024 0403 	bic.w	r4, r4, #3
 8000a94:	42a0      	cmp	r0, r4
 8000a96:	d005      	beq.n	8000aa4 <_malloc_r+0xa8>
 8000a98:	1a21      	subs	r1, r4, r0
 8000a9a:	4630      	mov	r0, r6
 8000a9c:	f000 fae2 	bl	8001064 <_sbrk_r>
 8000aa0:	3001      	adds	r0, #1
 8000aa2:	d0cf      	beq.n	8000a44 <_malloc_r+0x48>
 8000aa4:	6025      	str	r5, [r4, #0]
 8000aa6:	e7db      	b.n	8000a60 <_malloc_r+0x64>
 8000aa8:	20000084 	.word	0x20000084
 8000aac:	20000088 	.word	0x20000088

08000ab0 <__ssputs_r>:
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab4:	688e      	ldr	r6, [r1, #8]
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	4682      	mov	sl, r0
 8000aba:	460c      	mov	r4, r1
 8000abc:	4690      	mov	r8, r2
 8000abe:	4699      	mov	r9, r3
 8000ac0:	d837      	bhi.n	8000b32 <__ssputs_r+0x82>
 8000ac2:	898a      	ldrh	r2, [r1, #12]
 8000ac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000ac8:	d031      	beq.n	8000b2e <__ssputs_r+0x7e>
 8000aca:	6825      	ldr	r5, [r4, #0]
 8000acc:	6909      	ldr	r1, [r1, #16]
 8000ace:	1a6f      	subs	r7, r5, r1
 8000ad0:	6965      	ldr	r5, [r4, #20]
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ad8:	fb95 f5f3 	sdiv	r5, r5, r3
 8000adc:	f109 0301 	add.w	r3, r9, #1
 8000ae0:	443b      	add	r3, r7
 8000ae2:	429d      	cmp	r5, r3
 8000ae4:	bf38      	it	cc
 8000ae6:	461d      	movcc	r5, r3
 8000ae8:	0553      	lsls	r3, r2, #21
 8000aea:	d530      	bpl.n	8000b4e <__ssputs_r+0x9e>
 8000aec:	4629      	mov	r1, r5
 8000aee:	f7ff ff85 	bl	80009fc <_malloc_r>
 8000af2:	4606      	mov	r6, r0
 8000af4:	b950      	cbnz	r0, 8000b0c <__ssputs_r+0x5c>
 8000af6:	230c      	movs	r3, #12
 8000af8:	f8ca 3000 	str.w	r3, [sl]
 8000afc:	89a3      	ldrh	r3, [r4, #12]
 8000afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b02:	81a3      	strh	r3, [r4, #12]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	463a      	mov	r2, r7
 8000b0e:	6921      	ldr	r1, [r4, #16]
 8000b10:	f000 fab8 	bl	8001084 <memcpy>
 8000b14:	89a3      	ldrh	r3, [r4, #12]
 8000b16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1e:	81a3      	strh	r3, [r4, #12]
 8000b20:	6126      	str	r6, [r4, #16]
 8000b22:	6165      	str	r5, [r4, #20]
 8000b24:	443e      	add	r6, r7
 8000b26:	1bed      	subs	r5, r5, r7
 8000b28:	6026      	str	r6, [r4, #0]
 8000b2a:	60a5      	str	r5, [r4, #8]
 8000b2c:	464e      	mov	r6, r9
 8000b2e:	454e      	cmp	r6, r9
 8000b30:	d900      	bls.n	8000b34 <__ssputs_r+0x84>
 8000b32:	464e      	mov	r6, r9
 8000b34:	4632      	mov	r2, r6
 8000b36:	4641      	mov	r1, r8
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	f000 faae 	bl	800109a <memmove>
 8000b3e:	68a3      	ldr	r3, [r4, #8]
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	60a3      	str	r3, [r4, #8]
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	441e      	add	r6, r3
 8000b48:	6026      	str	r6, [r4, #0]
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	e7dc      	b.n	8000b08 <__ssputs_r+0x58>
 8000b4e:	462a      	mov	r2, r5
 8000b50:	f000 fb0c 	bl	800116c <_realloc_r>
 8000b54:	4606      	mov	r6, r0
 8000b56:	2800      	cmp	r0, #0
 8000b58:	d1e2      	bne.n	8000b20 <__ssputs_r+0x70>
 8000b5a:	6921      	ldr	r1, [r4, #16]
 8000b5c:	4650      	mov	r0, sl
 8000b5e:	f000 fab7 	bl	80010d0 <_free_r>
 8000b62:	e7c8      	b.n	8000af6 <__ssputs_r+0x46>

08000b64 <_svfiprintf_r>:
 8000b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b68:	461d      	mov	r5, r3
 8000b6a:	898b      	ldrh	r3, [r1, #12]
 8000b6c:	061f      	lsls	r7, r3, #24
 8000b6e:	b09d      	sub	sp, #116	; 0x74
 8000b70:	4680      	mov	r8, r0
 8000b72:	460c      	mov	r4, r1
 8000b74:	4616      	mov	r6, r2
 8000b76:	d50f      	bpl.n	8000b98 <_svfiprintf_r+0x34>
 8000b78:	690b      	ldr	r3, [r1, #16]
 8000b7a:	b96b      	cbnz	r3, 8000b98 <_svfiprintf_r+0x34>
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	f7ff ff3d 	bl	80009fc <_malloc_r>
 8000b82:	6020      	str	r0, [r4, #0]
 8000b84:	6120      	str	r0, [r4, #16]
 8000b86:	b928      	cbnz	r0, 8000b94 <_svfiprintf_r+0x30>
 8000b88:	230c      	movs	r3, #12
 8000b8a:	f8c8 3000 	str.w	r3, [r8]
 8000b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b92:	e0c8      	b.n	8000d26 <_svfiprintf_r+0x1c2>
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	6163      	str	r3, [r4, #20]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b9c:	2320      	movs	r3, #32
 8000b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ba2:	2330      	movs	r3, #48	; 0x30
 8000ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ba8:	9503      	str	r5, [sp, #12]
 8000baa:	f04f 0b01 	mov.w	fp, #1
 8000bae:	4637      	mov	r7, r6
 8000bb0:	463d      	mov	r5, r7
 8000bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000bb6:	b10b      	cbz	r3, 8000bbc <_svfiprintf_r+0x58>
 8000bb8:	2b25      	cmp	r3, #37	; 0x25
 8000bba:	d13e      	bne.n	8000c3a <_svfiprintf_r+0xd6>
 8000bbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8000bc0:	d00b      	beq.n	8000bda <_svfiprintf_r+0x76>
 8000bc2:	4653      	mov	r3, sl
 8000bc4:	4632      	mov	r2, r6
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	4640      	mov	r0, r8
 8000bca:	f7ff ff71 	bl	8000ab0 <__ssputs_r>
 8000bce:	3001      	adds	r0, #1
 8000bd0:	f000 80a4 	beq.w	8000d1c <_svfiprintf_r+0x1b8>
 8000bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bd6:	4453      	add	r3, sl
 8000bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8000bda:	783b      	ldrb	r3, [r7, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 809d 	beq.w	8000d1c <_svfiprintf_r+0x1b8>
 8000be2:	2300      	movs	r3, #0
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bec:	9304      	str	r3, [sp, #16]
 8000bee:	9307      	str	r3, [sp, #28]
 8000bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8000bf6:	462f      	mov	r7, r5
 8000bf8:	2205      	movs	r2, #5
 8000bfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8000bfe:	4850      	ldr	r0, [pc, #320]	; (8000d40 <_svfiprintf_r+0x1dc>)
 8000c00:	f7ff fae6 	bl	80001d0 <memchr>
 8000c04:	9b04      	ldr	r3, [sp, #16]
 8000c06:	b9d0      	cbnz	r0, 8000c3e <_svfiprintf_r+0xda>
 8000c08:	06d9      	lsls	r1, r3, #27
 8000c0a:	bf44      	itt	mi
 8000c0c:	2220      	movmi	r2, #32
 8000c0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000c12:	071a      	lsls	r2, r3, #28
 8000c14:	bf44      	itt	mi
 8000c16:	222b      	movmi	r2, #43	; 0x2b
 8000c18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000c1c:	782a      	ldrb	r2, [r5, #0]
 8000c1e:	2a2a      	cmp	r2, #42	; 0x2a
 8000c20:	d015      	beq.n	8000c4e <_svfiprintf_r+0xea>
 8000c22:	9a07      	ldr	r2, [sp, #28]
 8000c24:	462f      	mov	r7, r5
 8000c26:	2000      	movs	r0, #0
 8000c28:	250a      	movs	r5, #10
 8000c2a:	4639      	mov	r1, r7
 8000c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c30:	3b30      	subs	r3, #48	; 0x30
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	d94d      	bls.n	8000cd2 <_svfiprintf_r+0x16e>
 8000c36:	b1b8      	cbz	r0, 8000c68 <_svfiprintf_r+0x104>
 8000c38:	e00f      	b.n	8000c5a <_svfiprintf_r+0xf6>
 8000c3a:	462f      	mov	r7, r5
 8000c3c:	e7b8      	b.n	8000bb0 <_svfiprintf_r+0x4c>
 8000c3e:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <_svfiprintf_r+0x1dc>)
 8000c40:	1a80      	subs	r0, r0, r2
 8000c42:	fa0b f000 	lsl.w	r0, fp, r0
 8000c46:	4318      	orrs	r0, r3
 8000c48:	9004      	str	r0, [sp, #16]
 8000c4a:	463d      	mov	r5, r7
 8000c4c:	e7d3      	b.n	8000bf6 <_svfiprintf_r+0x92>
 8000c4e:	9a03      	ldr	r2, [sp, #12]
 8000c50:	1d11      	adds	r1, r2, #4
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	9103      	str	r1, [sp, #12]
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	db01      	blt.n	8000c5e <_svfiprintf_r+0xfa>
 8000c5a:	9207      	str	r2, [sp, #28]
 8000c5c:	e004      	b.n	8000c68 <_svfiprintf_r+0x104>
 8000c5e:	4252      	negs	r2, r2
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	9207      	str	r2, [sp, #28]
 8000c66:	9304      	str	r3, [sp, #16]
 8000c68:	783b      	ldrb	r3, [r7, #0]
 8000c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8000c6c:	d10c      	bne.n	8000c88 <_svfiprintf_r+0x124>
 8000c6e:	787b      	ldrb	r3, [r7, #1]
 8000c70:	2b2a      	cmp	r3, #42	; 0x2a
 8000c72:	d133      	bne.n	8000cdc <_svfiprintf_r+0x178>
 8000c74:	9b03      	ldr	r3, [sp, #12]
 8000c76:	1d1a      	adds	r2, r3, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	9203      	str	r2, [sp, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bfb8      	it	lt
 8000c80:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c84:	3702      	adds	r7, #2
 8000c86:	9305      	str	r3, [sp, #20]
 8000c88:	4d2e      	ldr	r5, [pc, #184]	; (8000d44 <_svfiprintf_r+0x1e0>)
 8000c8a:	7839      	ldrb	r1, [r7, #0]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4628      	mov	r0, r5
 8000c90:	f7ff fa9e 	bl	80001d0 <memchr>
 8000c94:	b138      	cbz	r0, 8000ca6 <_svfiprintf_r+0x142>
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	1b40      	subs	r0, r0, r5
 8000c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8000c9e:	9b04      	ldr	r3, [sp, #16]
 8000ca0:	4303      	orrs	r3, r0
 8000ca2:	3701      	adds	r7, #1
 8000ca4:	9304      	str	r3, [sp, #16]
 8000ca6:	7839      	ldrb	r1, [r7, #0]
 8000ca8:	4827      	ldr	r0, [pc, #156]	; (8000d48 <_svfiprintf_r+0x1e4>)
 8000caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cae:	2206      	movs	r2, #6
 8000cb0:	1c7e      	adds	r6, r7, #1
 8000cb2:	f7ff fa8d 	bl	80001d0 <memchr>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d038      	beq.n	8000d2c <_svfiprintf_r+0x1c8>
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <_svfiprintf_r+0x1e8>)
 8000cbc:	bb13      	cbnz	r3, 8000d04 <_svfiprintf_r+0x1a0>
 8000cbe:	9b03      	ldr	r3, [sp, #12]
 8000cc0:	3307      	adds	r3, #7
 8000cc2:	f023 0307 	bic.w	r3, r3, #7
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	9303      	str	r3, [sp, #12]
 8000cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ccc:	444b      	add	r3, r9
 8000cce:	9309      	str	r3, [sp, #36]	; 0x24
 8000cd0:	e76d      	b.n	8000bae <_svfiprintf_r+0x4a>
 8000cd2:	fb05 3202 	mla	r2, r5, r2, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	460f      	mov	r7, r1
 8000cda:	e7a6      	b.n	8000c2a <_svfiprintf_r+0xc6>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	3701      	adds	r7, #1
 8000ce0:	9305      	str	r3, [sp, #20]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	250a      	movs	r5, #10
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cec:	3a30      	subs	r2, #48	; 0x30
 8000cee:	2a09      	cmp	r2, #9
 8000cf0:	d903      	bls.n	8000cfa <_svfiprintf_r+0x196>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0c8      	beq.n	8000c88 <_svfiprintf_r+0x124>
 8000cf6:	9105      	str	r1, [sp, #20]
 8000cf8:	e7c6      	b.n	8000c88 <_svfiprintf_r+0x124>
 8000cfa:	fb05 2101 	mla	r1, r5, r1, r2
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4607      	mov	r7, r0
 8000d02:	e7f0      	b.n	8000ce6 <_svfiprintf_r+0x182>
 8000d04:	ab03      	add	r3, sp, #12
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	4622      	mov	r2, r4
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_svfiprintf_r+0x1ec>)
 8000d0c:	a904      	add	r1, sp, #16
 8000d0e:	4640      	mov	r0, r8
 8000d10:	f3af 8000 	nop.w
 8000d14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000d18:	4681      	mov	r9, r0
 8000d1a:	d1d6      	bne.n	8000cca <_svfiprintf_r+0x166>
 8000d1c:	89a3      	ldrh	r3, [r4, #12]
 8000d1e:	065b      	lsls	r3, r3, #25
 8000d20:	f53f af35 	bmi.w	8000b8e <_svfiprintf_r+0x2a>
 8000d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d26:	b01d      	add	sp, #116	; 0x74
 8000d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d2c:	ab03      	add	r3, sp, #12
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4622      	mov	r2, r4
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_svfiprintf_r+0x1ec>)
 8000d34:	a904      	add	r1, sp, #16
 8000d36:	4640      	mov	r0, r8
 8000d38:	f000 f882 	bl	8000e40 <_printf_i>
 8000d3c:	e7ea      	b.n	8000d14 <_svfiprintf_r+0x1b0>
 8000d3e:	bf00      	nop
 8000d40:	0800124c 	.word	0x0800124c
 8000d44:	08001252 	.word	0x08001252
 8000d48:	08001256 	.word	0x08001256
 8000d4c:	00000000 	.word	0x00000000
 8000d50:	08000ab1 	.word	0x08000ab1

08000d54 <_printf_common>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	4691      	mov	r9, r2
 8000d5a:	461f      	mov	r7, r3
 8000d5c:	688a      	ldr	r2, [r1, #8]
 8000d5e:	690b      	ldr	r3, [r1, #16]
 8000d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d64:	4293      	cmp	r3, r2
 8000d66:	bfb8      	it	lt
 8000d68:	4613      	movlt	r3, r2
 8000d6a:	f8c9 3000 	str.w	r3, [r9]
 8000d6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d72:	4606      	mov	r6, r0
 8000d74:	460c      	mov	r4, r1
 8000d76:	b112      	cbz	r2, 8000d7e <_printf_common+0x2a>
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f8c9 3000 	str.w	r3, [r9]
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	0699      	lsls	r1, r3, #26
 8000d82:	bf42      	ittt	mi
 8000d84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8000d88:	3302      	addmi	r3, #2
 8000d8a:	f8c9 3000 	strmi.w	r3, [r9]
 8000d8e:	6825      	ldr	r5, [r4, #0]
 8000d90:	f015 0506 	ands.w	r5, r5, #6
 8000d94:	d107      	bne.n	8000da6 <_printf_common+0x52>
 8000d96:	f104 0a19 	add.w	sl, r4, #25
 8000d9a:	68e3      	ldr	r3, [r4, #12]
 8000d9c:	f8d9 2000 	ldr.w	r2, [r9]
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	dc28      	bgt.n	8000df8 <_printf_common+0xa4>
 8000da6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000daa:	6822      	ldr	r2, [r4, #0]
 8000dac:	3300      	adds	r3, #0
 8000dae:	bf18      	it	ne
 8000db0:	2301      	movne	r3, #1
 8000db2:	0692      	lsls	r2, r2, #26
 8000db4:	d42d      	bmi.n	8000e12 <_printf_common+0xbe>
 8000db6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000dba:	4639      	mov	r1, r7
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	47c0      	blx	r8
 8000dc0:	3001      	adds	r0, #1
 8000dc2:	d020      	beq.n	8000e06 <_printf_common+0xb2>
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	68e5      	ldr	r5, [r4, #12]
 8000dc8:	f8d9 2000 	ldr.w	r2, [r9]
 8000dcc:	f003 0306 	and.w	r3, r3, #6
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	bf08      	it	eq
 8000dd4:	1aad      	subeq	r5, r5, r2
 8000dd6:	68a3      	ldr	r3, [r4, #8]
 8000dd8:	6922      	ldr	r2, [r4, #16]
 8000dda:	bf0c      	ite	eq
 8000ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000de0:	2500      	movne	r5, #0
 8000de2:	4293      	cmp	r3, r2
 8000de4:	bfc4      	itt	gt
 8000de6:	1a9b      	subgt	r3, r3, r2
 8000de8:	18ed      	addgt	r5, r5, r3
 8000dea:	f04f 0900 	mov.w	r9, #0
 8000dee:	341a      	adds	r4, #26
 8000df0:	454d      	cmp	r5, r9
 8000df2:	d11a      	bne.n	8000e2a <_printf_common+0xd6>
 8000df4:	2000      	movs	r0, #0
 8000df6:	e008      	b.n	8000e0a <_printf_common+0xb6>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	4652      	mov	r2, sl
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	4630      	mov	r0, r6
 8000e00:	47c0      	blx	r8
 8000e02:	3001      	adds	r0, #1
 8000e04:	d103      	bne.n	8000e0e <_printf_common+0xba>
 8000e06:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	3501      	adds	r5, #1
 8000e10:	e7c3      	b.n	8000d9a <_printf_common+0x46>
 8000e12:	18e1      	adds	r1, r4, r3
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	2030      	movs	r0, #48	; 0x30
 8000e18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e1c:	4422      	add	r2, r4
 8000e1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e26:	3302      	adds	r3, #2
 8000e28:	e7c5      	b.n	8000db6 <_printf_common+0x62>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4622      	mov	r2, r4
 8000e2e:	4639      	mov	r1, r7
 8000e30:	4630      	mov	r0, r6
 8000e32:	47c0      	blx	r8
 8000e34:	3001      	adds	r0, #1
 8000e36:	d0e6      	beq.n	8000e06 <_printf_common+0xb2>
 8000e38:	f109 0901 	add.w	r9, r9, #1
 8000e3c:	e7d8      	b.n	8000df0 <_printf_common+0x9c>
	...

08000e40 <_printf_i>:
 8000e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8000e48:	460c      	mov	r4, r1
 8000e4a:	7e09      	ldrb	r1, [r1, #24]
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	296e      	cmp	r1, #110	; 0x6e
 8000e50:	4617      	mov	r7, r2
 8000e52:	4606      	mov	r6, r0
 8000e54:	4698      	mov	r8, r3
 8000e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000e58:	f000 80b3 	beq.w	8000fc2 <_printf_i+0x182>
 8000e5c:	d822      	bhi.n	8000ea4 <_printf_i+0x64>
 8000e5e:	2963      	cmp	r1, #99	; 0x63
 8000e60:	d036      	beq.n	8000ed0 <_printf_i+0x90>
 8000e62:	d80a      	bhi.n	8000e7a <_printf_i+0x3a>
 8000e64:	2900      	cmp	r1, #0
 8000e66:	f000 80b9 	beq.w	8000fdc <_printf_i+0x19c>
 8000e6a:	2958      	cmp	r1, #88	; 0x58
 8000e6c:	f000 8083 	beq.w	8000f76 <_printf_i+0x136>
 8000e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000e78:	e032      	b.n	8000ee0 <_printf_i+0xa0>
 8000e7a:	2964      	cmp	r1, #100	; 0x64
 8000e7c:	d001      	beq.n	8000e82 <_printf_i+0x42>
 8000e7e:	2969      	cmp	r1, #105	; 0x69
 8000e80:	d1f6      	bne.n	8000e70 <_printf_i+0x30>
 8000e82:	6820      	ldr	r0, [r4, #0]
 8000e84:	6813      	ldr	r3, [r2, #0]
 8000e86:	0605      	lsls	r5, r0, #24
 8000e88:	f103 0104 	add.w	r1, r3, #4
 8000e8c:	d52a      	bpl.n	8000ee4 <_printf_i+0xa4>
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6011      	str	r1, [r2, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da03      	bge.n	8000e9e <_printf_i+0x5e>
 8000e96:	222d      	movs	r2, #45	; 0x2d
 8000e98:	425b      	negs	r3, r3
 8000e9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8000e9e:	486f      	ldr	r0, [pc, #444]	; (800105c <_printf_i+0x21c>)
 8000ea0:	220a      	movs	r2, #10
 8000ea2:	e039      	b.n	8000f18 <_printf_i+0xd8>
 8000ea4:	2973      	cmp	r1, #115	; 0x73
 8000ea6:	f000 809d 	beq.w	8000fe4 <_printf_i+0x1a4>
 8000eaa:	d808      	bhi.n	8000ebe <_printf_i+0x7e>
 8000eac:	296f      	cmp	r1, #111	; 0x6f
 8000eae:	d020      	beq.n	8000ef2 <_printf_i+0xb2>
 8000eb0:	2970      	cmp	r1, #112	; 0x70
 8000eb2:	d1dd      	bne.n	8000e70 <_printf_i+0x30>
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	f043 0320 	orr.w	r3, r3, #32
 8000eba:	6023      	str	r3, [r4, #0]
 8000ebc:	e003      	b.n	8000ec6 <_printf_i+0x86>
 8000ebe:	2975      	cmp	r1, #117	; 0x75
 8000ec0:	d017      	beq.n	8000ef2 <_printf_i+0xb2>
 8000ec2:	2978      	cmp	r1, #120	; 0x78
 8000ec4:	d1d4      	bne.n	8000e70 <_printf_i+0x30>
 8000ec6:	2378      	movs	r3, #120	; 0x78
 8000ec8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ecc:	4864      	ldr	r0, [pc, #400]	; (8001060 <_printf_i+0x220>)
 8000ece:	e055      	b.n	8000f7c <_printf_i+0x13c>
 8000ed0:	6813      	ldr	r3, [r2, #0]
 8000ed2:	1d19      	adds	r1, r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6011      	str	r1, [r2, #0]
 8000ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e08c      	b.n	8000ffe <_printf_i+0x1be>
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6011      	str	r1, [r2, #0]
 8000ee8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000eec:	bf18      	it	ne
 8000eee:	b21b      	sxthne	r3, r3
 8000ef0:	e7cf      	b.n	8000e92 <_printf_i+0x52>
 8000ef2:	6813      	ldr	r3, [r2, #0]
 8000ef4:	6825      	ldr	r5, [r4, #0]
 8000ef6:	1d18      	adds	r0, r3, #4
 8000ef8:	6010      	str	r0, [r2, #0]
 8000efa:	0628      	lsls	r0, r5, #24
 8000efc:	d501      	bpl.n	8000f02 <_printf_i+0xc2>
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	e002      	b.n	8000f08 <_printf_i+0xc8>
 8000f02:	0668      	lsls	r0, r5, #25
 8000f04:	d5fb      	bpl.n	8000efe <_printf_i+0xbe>
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	4854      	ldr	r0, [pc, #336]	; (800105c <_printf_i+0x21c>)
 8000f0a:	296f      	cmp	r1, #111	; 0x6f
 8000f0c:	bf14      	ite	ne
 8000f0e:	220a      	movne	r2, #10
 8000f10:	2208      	moveq	r2, #8
 8000f12:	2100      	movs	r1, #0
 8000f14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f18:	6865      	ldr	r5, [r4, #4]
 8000f1a:	60a5      	str	r5, [r4, #8]
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	f2c0 8095 	blt.w	800104c <_printf_i+0x20c>
 8000f22:	6821      	ldr	r1, [r4, #0]
 8000f24:	f021 0104 	bic.w	r1, r1, #4
 8000f28:	6021      	str	r1, [r4, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d13d      	bne.n	8000faa <_printf_i+0x16a>
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	f040 808e 	bne.w	8001050 <_printf_i+0x210>
 8000f34:	4665      	mov	r5, ip
 8000f36:	2a08      	cmp	r2, #8
 8000f38:	d10b      	bne.n	8000f52 <_printf_i+0x112>
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	07db      	lsls	r3, r3, #31
 8000f3e:	d508      	bpl.n	8000f52 <_printf_i+0x112>
 8000f40:	6923      	ldr	r3, [r4, #16]
 8000f42:	6862      	ldr	r2, [r4, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	bfde      	ittt	le
 8000f48:	2330      	movle	r3, #48	; 0x30
 8000f4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f52:	ebac 0305 	sub.w	r3, ip, r5
 8000f56:	6123      	str	r3, [r4, #16]
 8000f58:	f8cd 8000 	str.w	r8, [sp]
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	aa03      	add	r2, sp, #12
 8000f60:	4621      	mov	r1, r4
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff fef6 	bl	8000d54 <_printf_common>
 8000f68:	3001      	adds	r0, #1
 8000f6a:	d14d      	bne.n	8001008 <_printf_i+0x1c8>
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	b005      	add	sp, #20
 8000f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f76:	4839      	ldr	r0, [pc, #228]	; (800105c <_printf_i+0x21c>)
 8000f78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	6821      	ldr	r1, [r4, #0]
 8000f80:	1d1d      	adds	r5, r3, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6015      	str	r5, [r2, #0]
 8000f86:	060a      	lsls	r2, r1, #24
 8000f88:	d50b      	bpl.n	8000fa2 <_printf_i+0x162>
 8000f8a:	07ca      	lsls	r2, r1, #31
 8000f8c:	bf44      	itt	mi
 8000f8e:	f041 0120 	orrmi.w	r1, r1, #32
 8000f92:	6021      	strmi	r1, [r4, #0]
 8000f94:	b91b      	cbnz	r3, 8000f9e <_printf_i+0x15e>
 8000f96:	6822      	ldr	r2, [r4, #0]
 8000f98:	f022 0220 	bic.w	r2, r2, #32
 8000f9c:	6022      	str	r2, [r4, #0]
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	e7b7      	b.n	8000f12 <_printf_i+0xd2>
 8000fa2:	064d      	lsls	r5, r1, #25
 8000fa4:	bf48      	it	mi
 8000fa6:	b29b      	uxthmi	r3, r3
 8000fa8:	e7ef      	b.n	8000f8a <_printf_i+0x14a>
 8000faa:	4665      	mov	r5, ip
 8000fac:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fb0:	fb02 3311 	mls	r3, r2, r1, r3
 8000fb4:	5cc3      	ldrb	r3, [r0, r3]
 8000fb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8000fba:	460b      	mov	r3, r1
 8000fbc:	2900      	cmp	r1, #0
 8000fbe:	d1f5      	bne.n	8000fac <_printf_i+0x16c>
 8000fc0:	e7b9      	b.n	8000f36 <_printf_i+0xf6>
 8000fc2:	6813      	ldr	r3, [r2, #0]
 8000fc4:	6825      	ldr	r5, [r4, #0]
 8000fc6:	6961      	ldr	r1, [r4, #20]
 8000fc8:	1d18      	adds	r0, r3, #4
 8000fca:	6010      	str	r0, [r2, #0]
 8000fcc:	0628      	lsls	r0, r5, #24
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	d501      	bpl.n	8000fd6 <_printf_i+0x196>
 8000fd2:	6019      	str	r1, [r3, #0]
 8000fd4:	e002      	b.n	8000fdc <_printf_i+0x19c>
 8000fd6:	066a      	lsls	r2, r5, #25
 8000fd8:	d5fb      	bpl.n	8000fd2 <_printf_i+0x192>
 8000fda:	8019      	strh	r1, [r3, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	6123      	str	r3, [r4, #16]
 8000fe0:	4665      	mov	r5, ip
 8000fe2:	e7b9      	b.n	8000f58 <_printf_i+0x118>
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	1d19      	adds	r1, r3, #4
 8000fe8:	6011      	str	r1, [r2, #0]
 8000fea:	681d      	ldr	r5, [r3, #0]
 8000fec:	6862      	ldr	r2, [r4, #4]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	f7ff f8ed 	bl	80001d0 <memchr>
 8000ff6:	b108      	cbz	r0, 8000ffc <_printf_i+0x1bc>
 8000ff8:	1b40      	subs	r0, r0, r5
 8000ffa:	6060      	str	r0, [r4, #4]
 8000ffc:	6863      	ldr	r3, [r4, #4]
 8000ffe:	6123      	str	r3, [r4, #16]
 8001000:	2300      	movs	r3, #0
 8001002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001006:	e7a7      	b.n	8000f58 <_printf_i+0x118>
 8001008:	6923      	ldr	r3, [r4, #16]
 800100a:	462a      	mov	r2, r5
 800100c:	4639      	mov	r1, r7
 800100e:	4630      	mov	r0, r6
 8001010:	47c0      	blx	r8
 8001012:	3001      	adds	r0, #1
 8001014:	d0aa      	beq.n	8000f6c <_printf_i+0x12c>
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	079b      	lsls	r3, r3, #30
 800101a:	d413      	bmi.n	8001044 <_printf_i+0x204>
 800101c:	68e0      	ldr	r0, [r4, #12]
 800101e:	9b03      	ldr	r3, [sp, #12]
 8001020:	4298      	cmp	r0, r3
 8001022:	bfb8      	it	lt
 8001024:	4618      	movlt	r0, r3
 8001026:	e7a3      	b.n	8000f70 <_printf_i+0x130>
 8001028:	2301      	movs	r3, #1
 800102a:	464a      	mov	r2, r9
 800102c:	4639      	mov	r1, r7
 800102e:	4630      	mov	r0, r6
 8001030:	47c0      	blx	r8
 8001032:	3001      	adds	r0, #1
 8001034:	d09a      	beq.n	8000f6c <_printf_i+0x12c>
 8001036:	3501      	adds	r5, #1
 8001038:	68e3      	ldr	r3, [r4, #12]
 800103a:	9a03      	ldr	r2, [sp, #12]
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	42ab      	cmp	r3, r5
 8001040:	dcf2      	bgt.n	8001028 <_printf_i+0x1e8>
 8001042:	e7eb      	b.n	800101c <_printf_i+0x1dc>
 8001044:	2500      	movs	r5, #0
 8001046:	f104 0919 	add.w	r9, r4, #25
 800104a:	e7f5      	b.n	8001038 <_printf_i+0x1f8>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1ac      	bne.n	8000faa <_printf_i+0x16a>
 8001050:	7803      	ldrb	r3, [r0, #0]
 8001052:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001056:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800105a:	e76c      	b.n	8000f36 <_printf_i+0xf6>
 800105c:	0800125d 	.word	0x0800125d
 8001060:	0800126e 	.word	0x0800126e

08001064 <_sbrk_r>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4c06      	ldr	r4, [pc, #24]	; (8001080 <_sbrk_r+0x1c>)
 8001068:	2300      	movs	r3, #0
 800106a:	4605      	mov	r5, r0
 800106c:	4608      	mov	r0, r1
 800106e:	6023      	str	r3, [r4, #0]
 8001070:	f7ff fbe4 	bl	800083c <_sbrk>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	d102      	bne.n	800107e <_sbrk_r+0x1a>
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	b103      	cbz	r3, 800107e <_sbrk_r+0x1a>
 800107c:	602b      	str	r3, [r5, #0]
 800107e:	bd38      	pop	{r3, r4, r5, pc}
 8001080:	2000008c 	.word	0x2000008c

08001084 <memcpy>:
 8001084:	b510      	push	{r4, lr}
 8001086:	1e43      	subs	r3, r0, #1
 8001088:	440a      	add	r2, r1
 800108a:	4291      	cmp	r1, r2
 800108c:	d100      	bne.n	8001090 <memcpy+0xc>
 800108e:	bd10      	pop	{r4, pc}
 8001090:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001098:	e7f7      	b.n	800108a <memcpy+0x6>

0800109a <memmove>:
 800109a:	4288      	cmp	r0, r1
 800109c:	b510      	push	{r4, lr}
 800109e:	eb01 0302 	add.w	r3, r1, r2
 80010a2:	d807      	bhi.n	80010b4 <memmove+0x1a>
 80010a4:	1e42      	subs	r2, r0, #1
 80010a6:	4299      	cmp	r1, r3
 80010a8:	d00a      	beq.n	80010c0 <memmove+0x26>
 80010aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80010b2:	e7f8      	b.n	80010a6 <memmove+0xc>
 80010b4:	4283      	cmp	r3, r0
 80010b6:	d9f5      	bls.n	80010a4 <memmove+0xa>
 80010b8:	1881      	adds	r1, r0, r2
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	42d3      	cmn	r3, r2
 80010be:	d100      	bne.n	80010c2 <memmove+0x28>
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80010c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80010ca:	e7f7      	b.n	80010bc <memmove+0x22>

080010cc <__malloc_lock>:
 80010cc:	4770      	bx	lr

080010ce <__malloc_unlock>:
 80010ce:	4770      	bx	lr

080010d0 <_free_r>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4605      	mov	r5, r0
 80010d4:	2900      	cmp	r1, #0
 80010d6:	d045      	beq.n	8001164 <_free_r+0x94>
 80010d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010dc:	1f0c      	subs	r4, r1, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bfb8      	it	lt
 80010e2:	18e4      	addlt	r4, r4, r3
 80010e4:	f7ff fff2 	bl	80010cc <__malloc_lock>
 80010e8:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <_free_r+0x98>)
 80010ea:	6813      	ldr	r3, [r2, #0]
 80010ec:	4610      	mov	r0, r2
 80010ee:	b933      	cbnz	r3, 80010fe <_free_r+0x2e>
 80010f0:	6063      	str	r3, [r4, #4]
 80010f2:	6014      	str	r4, [r2, #0]
 80010f4:	4628      	mov	r0, r5
 80010f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010fa:	f7ff bfe8 	b.w	80010ce <__malloc_unlock>
 80010fe:	42a3      	cmp	r3, r4
 8001100:	d90c      	bls.n	800111c <_free_r+0x4c>
 8001102:	6821      	ldr	r1, [r4, #0]
 8001104:	1862      	adds	r2, r4, r1
 8001106:	4293      	cmp	r3, r2
 8001108:	bf04      	itt	eq
 800110a:	681a      	ldreq	r2, [r3, #0]
 800110c:	685b      	ldreq	r3, [r3, #4]
 800110e:	6063      	str	r3, [r4, #4]
 8001110:	bf04      	itt	eq
 8001112:	1852      	addeq	r2, r2, r1
 8001114:	6022      	streq	r2, [r4, #0]
 8001116:	6004      	str	r4, [r0, #0]
 8001118:	e7ec      	b.n	80010f4 <_free_r+0x24>
 800111a:	4613      	mov	r3, r2
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	b10a      	cbz	r2, 8001124 <_free_r+0x54>
 8001120:	42a2      	cmp	r2, r4
 8001122:	d9fa      	bls.n	800111a <_free_r+0x4a>
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	1858      	adds	r0, r3, r1
 8001128:	42a0      	cmp	r0, r4
 800112a:	d10b      	bne.n	8001144 <_free_r+0x74>
 800112c:	6820      	ldr	r0, [r4, #0]
 800112e:	4401      	add	r1, r0
 8001130:	1858      	adds	r0, r3, r1
 8001132:	4282      	cmp	r2, r0
 8001134:	6019      	str	r1, [r3, #0]
 8001136:	d1dd      	bne.n	80010f4 <_free_r+0x24>
 8001138:	6810      	ldr	r0, [r2, #0]
 800113a:	6852      	ldr	r2, [r2, #4]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	4401      	add	r1, r0
 8001140:	6019      	str	r1, [r3, #0]
 8001142:	e7d7      	b.n	80010f4 <_free_r+0x24>
 8001144:	d902      	bls.n	800114c <_free_r+0x7c>
 8001146:	230c      	movs	r3, #12
 8001148:	602b      	str	r3, [r5, #0]
 800114a:	e7d3      	b.n	80010f4 <_free_r+0x24>
 800114c:	6820      	ldr	r0, [r4, #0]
 800114e:	1821      	adds	r1, r4, r0
 8001150:	428a      	cmp	r2, r1
 8001152:	bf04      	itt	eq
 8001154:	6811      	ldreq	r1, [r2, #0]
 8001156:	6852      	ldreq	r2, [r2, #4]
 8001158:	6062      	str	r2, [r4, #4]
 800115a:	bf04      	itt	eq
 800115c:	1809      	addeq	r1, r1, r0
 800115e:	6021      	streq	r1, [r4, #0]
 8001160:	605c      	str	r4, [r3, #4]
 8001162:	e7c7      	b.n	80010f4 <_free_r+0x24>
 8001164:	bd38      	pop	{r3, r4, r5, pc}
 8001166:	bf00      	nop
 8001168:	20000084 	.word	0x20000084

0800116c <_realloc_r>:
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116e:	4607      	mov	r7, r0
 8001170:	4614      	mov	r4, r2
 8001172:	460e      	mov	r6, r1
 8001174:	b921      	cbnz	r1, 8001180 <_realloc_r+0x14>
 8001176:	4611      	mov	r1, r2
 8001178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800117c:	f7ff bc3e 	b.w	80009fc <_malloc_r>
 8001180:	b922      	cbnz	r2, 800118c <_realloc_r+0x20>
 8001182:	f7ff ffa5 	bl	80010d0 <_free_r>
 8001186:	4625      	mov	r5, r4
 8001188:	4628      	mov	r0, r5
 800118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118c:	f000 f814 	bl	80011b8 <_malloc_usable_size_r>
 8001190:	42a0      	cmp	r0, r4
 8001192:	d20f      	bcs.n	80011b4 <_realloc_r+0x48>
 8001194:	4621      	mov	r1, r4
 8001196:	4638      	mov	r0, r7
 8001198:	f7ff fc30 	bl	80009fc <_malloc_r>
 800119c:	4605      	mov	r5, r0
 800119e:	2800      	cmp	r0, #0
 80011a0:	d0f2      	beq.n	8001188 <_realloc_r+0x1c>
 80011a2:	4631      	mov	r1, r6
 80011a4:	4622      	mov	r2, r4
 80011a6:	f7ff ff6d 	bl	8001084 <memcpy>
 80011aa:	4631      	mov	r1, r6
 80011ac:	4638      	mov	r0, r7
 80011ae:	f7ff ff8f 	bl	80010d0 <_free_r>
 80011b2:	e7e9      	b.n	8001188 <_realloc_r+0x1c>
 80011b4:	4635      	mov	r5, r6
 80011b6:	e7e7      	b.n	8001188 <_realloc_r+0x1c>

080011b8 <_malloc_usable_size_r>:
 80011b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011bc:	1f18      	subs	r0, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bfbc      	itt	lt
 80011c2:	580b      	ldrlt	r3, [r1, r0]
 80011c4:	18c0      	addlt	r0, r0, r3
 80011c6:	4770      	bx	lr

080011c8 <_init>:
 80011c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ca:	bf00      	nop
 80011cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ce:	bc08      	pop	{r3}
 80011d0:	469e      	mov	lr, r3
 80011d2:	4770      	bx	lr

080011d4 <_fini>:
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	bf00      	nop
 80011d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011da:	bc08      	pop	{r3}
 80011dc:	469e      	mov	lr, r3
 80011de:	4770      	bx	lr
